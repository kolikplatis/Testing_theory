1) Что такое проект?
Проект - определённая деятельность или инициатива, направленная на разработку, внедрение и тестирование программного продукта или его компонента.

2)Из каких этапов состоит Waterfall модель/Каскадная модель?
Каскадная модель характеризуется линейной последовательностью этапов, где каждый этап начинается только после завершения предыдущего.
анализ требований
дизайн и проектирование
разработка
тестирование
развертывание
эксплуатация и поддержка
завершение проекта

3) Какие преимущества и недостатки  Waterfall модели/Каскадной модели?
Преимущества:
Простота: Линейная структура облегчает понимание процесса разработки. Каждый этап отчетливо обозначен.
Четкие требования: Поскольку требования собираются в начале, это помогает избежать путаницы в дальнейших этапах.
Документированность: Модель предполагает наличие обширной документации на каждом этапе, что облегчает управление проектом.
Легкая оценка прогресса: Каждый этап завершен до перехода к следующему, что упрощает отслеживание статуса проекта.
Недостатки:
Негибкость: Изменения на поздних стадиях разработки могут быть дорогими и сложными, так как они требуют возврата к предыдущим этапам.
Риски неполных требований: Если вначале не удается определить все требования, это может привести к серьезным проблемам в будущем.
Поздняя доставка: Тестирование происходит только после завершения кодирования, что может выявить ошибки и недочеты слишком поздно в процессе.
Сложность в управлении изменениями: Если в процессе разработки появляются новые требования, их внедрение может вызвать значительные затруднения.

4) Из каких этапов состоит V-model/V-модель
V-модель -  модель, описывающая процессы жизненного цикла разработки программного обеспечения с момента составления спецификации требований до этапа сопровождения. V-модель показывает интеграцию процессов тестирования в каждую фазу цикла разработки программного обеспечения. (ISTQB)
На каждой стадии «на спуске» мы думаем о том, что и как будет происходить на соответствующей стадии «на подъёме».

5) Когда использовать V-model/V-модель?
Жесткие требования и спецификации:
Если требования к проекту хорошо понятны и фиксированы на раннем этапе, V-модель может быть идеальным выбором. Она требует тщательного планирования и анализа на начальных стадиях, что подходит для проектов с четкими и неизменными требованиями.
Высокие требования к качеству и надежности:
Если программное обеспечение должно быть очень надежным и качественным (например, в критически важных системах, таких как авиация, медицина, автомобильная промышленность), V-модель обеспечивает тщательное тестирование на каждом этапе разработки.
Минимизация рисков на этапе тестирования:
В проектах, где стоимость исправления ошибок на поздних стадиях очень высока, V-модель помогает выявить и устранить проблемы на ранних этапах. Это особенно важно в проектах, где время на тестирование ограничено.
Ожидается минимальное количество изменений:
Если проект предполагает минимальные изменения в требованиях после их определения, V-модель будет эффективна, так как она не предусматривает легкой адаптации к изменениям в середине цикла разработки.
Наличие четкой документации:
Если проект требует подробной документации на каждом этапе разработки и тестирования, V-модель обеспечивает структурированный подход с необходимыми документами на каждом шаге.
Опыт работы с каскадной моделью:
Если команда уже имеет опыт работы с каскадной моделью, переход на V-модель может быть естественным и комфортным, особенно если необходимо усилить акцент на тестировании.
V-модель применяется в разработке медицинских устройств и систем, авиационной и автомобильной промышленности, финансовых и банковских системах, энергетике и инфраструктуре, а также в информационных системах и телекоммуникациях

6)Из каких этапов состоит Iterative model/Итеративная модель?
Итеративная модель - метод, подразумевающий создание MVP (minimum viable product) - минимально жизнеспособного продукта и улучшение его с каждой последующей итерацией. Каждая итерация включает в себя этапы анализа, проектирования, написания кода и тестирования. В конце каждой итерации получается некий промежуточный результат, который может быть использован либо как основа для следующей итерации, либо как рабочий продукт, который может быть выпущен или использован.
Пример: для того, чтобы создать интернет-магазин с книгами, согласно итеративной модели, мы сначала создадим минимальный набор функций: каталог, корзина и доставка. Как только они будут готовы, мы сразу же выпустим его на рынок и начнем продавать книги. Одновременно с этим, разработка продолжится. В следующую итерацию мы добавим несколько способов оплаты заказов. Потом добавим в каталог возможность сортировать книги и фильтровать по разным параметрам. В какой-то итерации привнесем возможность писать отзывы на книги и так далее.

Этапы:
планирование и анализ
проектирование и дизайн
разработка 
тестирование
оценка и проверка
планирование следюущей итерации

7) Когда использовать Iterative model/Итеративная модель?
Требования к проекту не определены полностью или изменяются в процессе разработки.
Проект имеет длительный срок выполнения, и требуется предоставлять результаты заказчику на регулярной основе.
Необходима быстрая реакция на обратную связь от заказчика, чтобы можно было изменить проект в соответствии с требованиями.
Проект разбивается на несколько итераций, которые могут выполняться параллельно разными командами.
Необходимо быстро начать разработку, не имея полного понимания всех требований и ограничений проекта.
Разработка сложной системы, где каждая итерация позволяет уточнить требования и получить обратную связь.
Эта модель хорошо подходит для проектов, которые могут быть разделены на небольшие части и технологии разработки, используемые в проекте, хорошо изучены и понятны. Она также хорошо работает в командах, где есть высокий уровень взаимодействия и коммуникации между членами команды и заказчиком.

8) Плюсы и минусы Iterative model/Итеративной модели
Плюсы:
Улучшенная гибкость: итеративная модель позволяет вносить изменения в процесс разработки на каждой итерации в зависимости от полученного опыта и обратной связи.
Возможность раннего обнаружения проблем: благодаря регулярным итерациям и быстрому получению обратной связи, проблемы и недостатки в проекте могут быть выявлены и решены на ранних стадиях разработки.
Более быстрая поставка: итеративная модель позволяет создавать рабочие прототипы или части функционала на каждой итерации, что может сократить время, необходимое для завершения проекта.
Минусы:
Усложнение планирования: поскольку каждая итерация требует отдельного планирования и оценки ресурсов, это может усложнить процесс планирования проекта.
Недостаточная точность оценки времени и стоимости: в связи с непостоянством итеративного процесса может быть сложно точно оценить время и стоимость завершения проекта. Это может привести к проблемам с управлением бюджетом и сроками.
Высокая требовательность к коммуникации: чтобы итеративная модель была эффективной, требуется активное и эффективное взаимодействие и обратная связь между командой разработчиков и заказчиком.
 
9) Agile - это?
Agile — это гибкая методология разработки программного обеспечения, которая фокусируется на адаптивном планировании, эволюционном развитии, ранней доставке продукта и постоянном улучшении на основе обратной связи. Agile отличается от традиционных подходов (таких как каскадная модель) своей гибкостью и возможностью быстро реагировать на изменения требований.

10)Agile-манифест это?
Agile Манифест — это ключевой документ, опубликованный в 2001 году, который заложил основы гибкой методологии разработки программного обеспечения (Agile). Этот манифест был создан группой разработчиков, стремившихся найти более эффективные и гибкие способы разработки ПО, по сравнению с традиционными, жесткими методами, такими как каскадная модель.

11)Какие ценности Agile-манифеста?
1.Люди и взаимодействие важнее процессов и инструментов
2.Работающий продукт важнее исчерпывающей документации
3.Сотрудничество с заказчиком важнее согласования условий контракта
4.Готовность к изменениям важнее следования первоначальному плану


12) Основные принципы Agile-манифеста?
1.Наивысшим приоритетом для нас является удовлетворение потребностей заказчика, благодаря регулярной и ранней поставке ценного программного обеспечения.
2.Изменение требований приветствуется, даже на поздних стадиях разработки. Agile-процессы позволяют использовать изменения для обеспечения заказчику конкурентного преимущества.
3.Работающий продукт следует выпускать как можно чаще, с периодичностью от пары недель до пары месяцев.
4.На протяжении всего проекта разработчики и представители бизнеса должны ежедневно работать вместе.
5.Над проектом должны работать мотивированные профессионалы. Чтобы работа была сделана, создайте условия, обеспечьте поддержку и полностью доверьтесь им.
6.Непосредственное общение является наиболее практичным и эффективным способом обмена информацией как с самой командой, так и внутри команды.
7.Работающий продукт — основной показатель прогресса.
8.Инвесторы, разработчики и пользователи должны иметь возможность поддерживать постоянный ритм бесконечно. Agile помогает наладить такой устойчивый процесс разработки.
9.Постоянное внимание к техническому совершенству и качеству проектирования повышает гибкость проекта.
10.Простота — искусство минимизации лишней работы — крайне необходима.
11.Самые лучшие требования, архитектурные и технические решения рождаются у самоорганизующихся команд.
12. Команда должна систематически анализировать возможные способы улучшения эффективности и соответственно корректировать стиль своей работы.

13) Scrum - это?
Scrum — это методология управления проектами, в частности в разработке программного обеспечения, основанная на гибких принципах (Agile). Scrum помогает командам работать эффективно, предоставляя возможность часто получать обратную связь и адаптироваться к изменениям.
Основные элементы Scrum:
Роли:
Scrum-мастер — отвечает за процесс, устраняет препятствия.
Владелец продукта — определяет приоритеты и управляет бэклогом продукта.
Команда разработки — непосредственно выполняет работу, самоорганизуется.
Артефакты:
Бэклог продукта — список всех задач и требований.
Бэклог спринта — задачи, выбранные для выполнения в текущем спринте.
Инкремент — работающий продукт, представленный в конце спринта.
События:
Спринт — фиксированный период (обычно 2–4 недели), в течение которого команда выполняет задачи.
Ежедневный стендап — короткие ежедневные собрания для синхронизации.
Планирование спринта
Обзор спринта — демонстрация результатов спринта.
Ретроспектива — анализ работы команды с целью улучшения процессов.
Scrum позволяет быстро реагировать на изменения, фокусироваться на самых приоритетных задачах и непрерывно улучшать рабочие процессы.
Ценности Scrum:
Фокус (Focus): Команда концентрируется на выполнении задач, выбранных для текущего спринта. Это помогает избегать отвлекающих факторов и улучшать продуктивность.
Мужество (Courage): Члены команды смело принимают сложные задачи, открыто обсуждают проблемы и готовы к изменениям. Мужество позволяет команде экспериментировать и учиться на ошибках.
Открытость (Openness): Все участники команды должны быть честными и открытыми в коммуникации. Прозрачность помогает выявлять проблемы на ранних стадиях и улучшает сотрудничество.
Уважение (Respect): Каждый член команды ценит мнение и вклад других, независимо от роли или опыта. Уважение способствует созданию здоровой и продуктивной рабочей атмосферы.
Преданность (Commitment): Команда и каждый ее участник берут на себя обязательства по достижению целей спринта. Преданность гарантирует, что все работают с полной отдачей на общий результат.
Столпы Scrum:
Прозрачность (Transparency): Все аспекты процесса должны быть видимы и понятны для всех участников. Это включает в себя ясность целей, прогресса и состояния работы. Прозрачность позволяет команде иметь единое понимание текущего состояния проекта, что помогает принимать обоснованные решения.
Инспекция (Inspection): Регулярный контроль и проверка прогресса работы по отношению к целям спринта и продукта. Команда должна часто оценивать состояние артефактов и процессов, чтобы выявлять отклонения от плана и вовремя принимать меры для их корректировки.
Адаптация (Adaptation): На основе результатов инспекции команда вносит необходимые изменения в процесс работы или в план для улучшения результатов. Адаптация позволяет быстро реагировать на изменения и корректировать курс проекта в соответствии с новыми условиями или информацией.

14) Что такое Velocity/Capacity?
Velocity (скорость) — это показатель, который отражает количество работы, выполненной командой за один спринт. 
Velocity измеряется в количестве выполненных "сторипоинтов" (story points) или других единиц работы (например, задач или часов), завершенных за спринт.
Как измеряется: Velocity рассчитывается на основе фактических данных о выполнении задач за несколько прошедших спринтов. Например, если команда завершила 30 сторипоинтов в одном спринте и 28 в следующем, средняя скорость будет равна 29 сторипоинтам.
Как используется: Velocity помогает прогнозировать, сколько работы команда может завершить в будущем спринте и планировать объем работы на основе фактических возможностей команды. Это также помогает определить, насколько эффективна команда в выполнении задач и как может измениться производительность с течением времени.
Как команды оценивают в story points:
Фибоначчи или другие шкалы:
Часто используются числа из ряда Фибоначчи (1, 2, 3, 5, 8, 13, 21 и т.д.), так как они лучше подчеркивают рост сложности задачи по мере увеличения числового значения.
Это помогает команде не тратить слишком много времени на точные оценки, а сосредоточиться на относительных различиях между задачами.
Определение эталонных задач:
Команда выбирает несколько эталонных задач, которые уже выполнены и по которым есть общее согласие относительно их сложности. Эти задачи используются как ориентиры для оценки новых задач.
Например, задача A оценена в 3 story points и считается "умеренно сложной". Новая задача B сравнивается с задачей A: если она сложнее, ей присваивается большее количество story points, если проще — меньшее.
Planning Poker:
Это популярный метод оценки, где каждый член команды получает карточки с числами, представляющими возможные оценки в story points.
Скрам-мастер или владелец продукта описывает задачу, которую нужно оценить, и каждый участник тайно выбирает карточку с числом, соответствующим его оценке сложности.
После того как все выбрали, карточки одновременно раскрываются. Если оценки сильно разнятся, команда обсуждает причину различий, а затем повторяет голосование до достижения консенсуса.

Capacity (вместимость или возможности) — это оценка доступного времени или ресурсов, которыми располагает команда для работы в течение спринта. Capacity измеряется в часах или днях, доступных для выполнения задач, учитывая наличие всех членов команды и их фактическое рабочее время.
Как измеряется: Capacity учитывает количество членов команды, количество рабочих дней в спринте и любую другую информацию, которая может повлиять на время, доступное для работы (например, отпуска, больничные дни, обучение и т.д.). Например, если у команды из 5 человек каждый участник доступен по 6 часов в день, а спринт длится 10 дней, общая вместимость составит 300 часов.
Как используется: Capacity помогает команде и Scrum-мастеру планировать объем работы на спринт с учетом реальных возможностей команды. Этот показатель используется, чтобы избежать перегрузки или недогруза команды и обеспечить реалистичное планирование.
Пример расчета Capacity для команды:
Предположим, что у нас есть команда из 5 человек, и спринт длится 2 недели (10 рабочих дней). Каждый из членов команды работает 8 часов в день.
Определяем рабочие дни для каждого члена команды:
Участник A: 10 дней
Участник B: 9 дней (1 день отпуска)
Участник C: 10 дней
Участник D: 8 дней (2 дня на конференции)
Участник E: 10 дней
Рассчитываем доступное рабочее время (в часах) для каждого участника:
Участник A: 10 дней * 8 часов = 80 часов
Участник B: 9 дней * 8 часов = 72 часа
Участник C: 10 дней * 8 часов = 80 часов
Участник D: 8 дней * 8 часов = 64 часа
Участник E: 10 дней * 8 часов = 80 часов
Суммируем доступное рабочее время для всей команды:
Общее рабочее время команды = 80 + 72 + 80 + 64 + 80 = 376 часов
Это значение в 376 часов — это и есть capacity команды на спринт.
Использование Capacity:
Capacity используется для планирования спринта, чтобы команда не взяла на себя больше задач, чем она сможет выполнить. Например, если задачи в бэклоге оценены в story points, и команда обычно выполняет 1 story point за 4 часа, то на 376 часов команда может запланировать примерно 94 story points (376 / 4).
Взаимосвязь Velocity и Capacity
Velocity отражает, сколько работы команда реально выполняет в среднем за спринт, исходя из исторических данных.
Capacity определяет, сколько работы команда способна выполнить в конкретный спринт, исходя из текущих доступных ресурсов.


15) Преимущества и недостатки Scrum
Преимущества Scrum:
Гибкость и адаптивность:
Scrum позволяет командам быстро адаптироваться к изменениям в требованиях или условиях. Это особенно важно в проектах с высокой степенью неопределенности.
Фокус на приоритетах:
Постоянная работа с бэклогом продукта и участие владельца продукта помогают команде фокусироваться на самых важных и приоритетных задачах.
Прозрачность и видимость прогресса:
Регулярные встречи (ежедневные стендапы, обзоры спринтов, ретроспективы) обеспечивают прозрачность процесса и дают всем участникам проекта ясное представление о прогрессе и возникающих проблемах.
Улучшение качества:
Частые инкременты (ежеспринтовые релизы) позволяют тестировать продукт на ранних стадиях, что способствует выявлению и исправлению ошибок до того, как они станут критичными.
Командная работа и самоорганизация:
Scrum поощряет командное взаимодействие и самоорганизацию, что повышает вовлеченность и мотивацию членов команды.
Постоянное улучшение:
Ретроспективы способствуют регулярному анализу процессов и помогают команде постоянно искать способы улучшения своей работы.

Недостатки Scrum:
Подходит не для всех проектов:
Scrum наиболее эффективен в проектах с высокой степенью неопределенности и возможностью часто менять приоритеты. В проектах с четко определенными требованиями и стабильным объемом задач Scrum может быть избыточным.
Требует высокой дисциплины:
Успешное использование Scrum требует от команды строгого соблюдения всех его практик, таких как ежедневные стендапы, четкое определение задач и их оценка. Без дисциплины и следования процессам Scrum может привести к хаосу.
Риски при неправильном использовании:
Неправильное внедрение Scrum, например, без четкого понимания ролей и ответственности, может привести к путанице, снижению продуктивности и даже провалу проекта.
Возможные проблемы с масштабированием:
Scrum отлично работает в небольших командах, но может столкнуться с трудностями при масштабировании на большие проекты или организации с множеством команд. В таких случаях требуются дополнительные фреймворки, такие как Scrum of Scrums или SAFe.
Постоянное участие владельца продукта:
Scrum требует активного участия владельца продукта, что может быть сложным, если такой человек не всегда доступен или недостаточно вовлечен в процесс.
Возможные проблемы с оценкой задач:
Оценка задач в story points и использование Velocity для планирования могут быть трудными для команд, которые не имеют достаточного опыта или единообразного понимания сложности задач.

16) Что такое ретроспектива?
Ретроспектива - специальная встреча, которая проводится по итогам одного или нескольких спринтов. На ней команда подводит итоги проделанной работы и рефлексирует о проведенном времени.
Участники:
Product Owner
Scrum Master
Development Team 
Заинтересованные стороны

Основные этапы ретроспективы:
Подготовка: Scrum-мастер или фасилитатор готовит встречу, подбирает вопросы или упражнения, которые помогут участникам лучше понять результаты прошедшего спринта.
Сбор данных: Команда делится своими впечатлениями о спринте, высказывает мнения о том, что пошло хорошо, а что могло бы быть лучше. Для этого часто используются различные техники, такие как «Start-Stop-Continue», «Плюсы и минусы» или «5 Почему».
Генерация идей: Участники предлагают идеи и обсуждают возможные улучшения. Этот этап включает в себя мозговой штурм, ранжирование идей по приоритетам и выбор наиболее значимых для внедрения в следующий спринт.
Принятие решений: Команда совместно принимает решения о том, какие действия или изменения будут внедряться в следующем спринте. Эти решения фиксируются и добавляются в план работы на следующий спринт.
Закрытие ретроспективы:Итоги встречи подводятся, часто проводится небольшая рефлексия по поводу самой ретроспективы (например, что можно улучшить в процессе проведения ретроспектив). Команда благодарит друг друга за участие.
Основная цель ретроспективы — создать безопасное пространство для общения команды. На ней каждый участник может поделиться тревогами и проблемами. Выявление и решение проблем в перспективе должно повысить эффективность работы над проектом.

17) Kanban - это?
Kanban — это метод управления проектами, ориентированный на визуализацию рабочего процесса и оптимизацию потока задач.
Основные принципы Kanban:
Визуализация работы:
Все задачи отображаются на доске Kanban, разделенной на колонки, представляющие стадии выполнения работы (например, "To Do", "In Progress", "Done"). Это дает команде и заинтересованным сторонам четкое представление о текущем состоянии задач.
Ограничение незавершенной работы (WIP):
В Kanban устанавливаются ограничения на количество задач, которые могут находиться в работе на каждом этапе. Это помогает предотвратить перегрузку команды и ускорить завершение задач.
Управление потоком:
Основная цель Kanban — улучшить поток работы, уменьшая задержки и повышая эффективность. Команда постоянно работает над тем, чтобы задачи двигались по доске как можно быстрее.
Совершенствование процессов:
Kanban поощряет непрерывное улучшение рабочих процессов. Команда регулярно анализирует свою работу и вносит изменения для повышения эффективности.

18) Преимущества и недостатки Kanban
Преимущества Kanban:
Гибкость:
Kanban не требует фиксированных итераций или спринтов, что позволяет команде адаптироваться к изменениям в требованиях или приоритетах в реальном времени.
Визуализация рабочего процесса:
Kanban-доска предоставляет наглядное представление о текущем состоянии задач. Это упрощает мониторинг прогресса, выявление узких мест и повышение прозрачности.
Ограничение незавершенной работы (WIP):
WIP-лимиты помогают предотвратить перегрузку команды, улучшить фокус и повысить эффективность. Это способствует более быстрой реализации задач и снижению времени выполнения.
Улучшение потока работы:
Kanban ориентирован на оптимизацию потока задач, что приводит к более эффективному управлению ресурсами и минимизации задержек.
Постепенное улучшение процессов:
Канбан поощряет постоянное совершенствование процессов. Команды регулярно анализируют свою работу и вносят изменения для повышения эффективности.
Простота внедрения:
Kanban легко интегрируется в существующие рабочие процессы без необходимости в коренных изменениях или специальных ролях. Его можно начать использовать практически сразу.
Недостатки Kanban:
Отсутствие фиксированных сроков:
В Kanban нет четко установленных сроков для выполнения задач (как в спринтах в Scrum), что может привести к задержкам или недостаточному планированию сроков.
Требования к самоорганизации команды:
Kanban требует высокой степени самоорганизации и дисциплины. Без этого метод может привести к хаосу, особенно если команда не контролирует WIP-лимиты или не занимается регулярным улучшением процессов.
Ограниченная структура:
В отличие от Scrum, где есть четко определенные роли и ритуалы, Kanban предоставляет меньше структуры. Это может быть как плюсом, так и минусом, в зависимости от зрелости и уровня самоорганизации команды.
Проблемы с приоритизацией:
Поскольку задачи в Kanban часто выполняются по мере поступления, может возникнуть проблема с приоритизацией задач, если они не управляются эффективно.
Трудности с масштабированием:
Kanban может быть сложнее масштабировать на большие команды или организации, особенно если отсутствует четкое управление потоками задач и отсутствуют общие практики.

19) Что такое SDLC? Из каких этапов состоит? Что происходит на каждом этапе?
SDLC (Software Development Life Cycle) — это процесс, используемый для разработки программного обеспечения. Он описывает набор шагов, которые необходимо выполнить для создания высококачественного программного продукта. 
Этапы SDLC:
Планирование (Planning):
Что происходит: На этом этапе определяются цели проекта, его масштаб, требования к ресурсам и временные рамки. Команда анализирует бизнес-требования и разрабатывает план проекта, включая оценки затрат и рисков.
Задачи: Оценка возможностей проекта, составление бюджета, определение основных требований, идентификация рисков.
Анализ требований (Requirements Analysis):
Что происходит: Сбор и документирование функциональных и нефункциональных требований к программному обеспечению. Взаимодействие с заинтересованными сторонами для уточнения требований.
Задачи: Создание спецификаций требований, определение функциональных возможностей и ограничений системы, формирование документации по требованиям.
Проектирование (Design):
Что происходит: Разработка архитектуры системы и её компонентов на основе собранных требований. Здесь проектируются пользовательские интерфейсы, базы данных, архитектура программного обеспечения.
Задачи: Создание детализированных схем и архитектуры, разработка технической документации, проектирование баз данных и интерфейсов.
Разработка (Development):
Что происходит: Написание кода на основе спроектированной архитектуры. Разработчики создают программные компоненты, модули и интегрируют их в систему.
Задачи: Программирование функционала, написание кода, интеграция различных частей системы.
Тестирование (Testing):
Что происходит: Проверка программного обеспечения на соответствие требованиям. Включает функциональное, интеграционное, системное и регрессионное тестирование. Выявляются и исправляются ошибки и баги.
Задачи: Написание тест-кейсов, выполнение тестирования, исправление багов, проверка качества и производительности.
Внедрение (Deployment):
Что происходит: Программное обеспечение внедряется в рабочую среду и становится доступным для пользователей. Возможно развертывание на сервере, установка на устройствах или публикация в облаке.
Задачи: Развертывание системы, обучение пользователей, миграция данных, настройка среды.
Эксплуатация и сопровождение (Operations and Maintenance):
Что происходит: Поддержка и обслуживание программного обеспечения после его внедрения. Это включает исправление багов, обновление системы, добавление новых функций и поддержание ее работоспособности.
Задачи: Обеспечение поддержки пользователей, мониторинг работы системы, внесение исправлений, выпуск обновлений и улучшений.

20) Что такое STLC? Из каких этапов состоит? Что происходит на каждом этапе?
STLC (Software Testing Life Cycle) — это процесс, который включает в себя все этапы тестирования программного обеспечения. STLC направлен на обеспечение качества программного продукта и выявление дефектов на каждом этапе разработки. Важно отметить, что STLC не является частью SDLC, но он тесно связан с ним и фокусируется исключительно на аспектах тестирования.
Этапы STLC и их описание:
Анализ требований (Requirement Analysis):
Что происходит: Тестировщики изучают требования к программному обеспечению, чтобы понять, что именно нужно тестировать. На этом этапе также выявляются тестируемые и нетестируемые требования.
Задачи: Анализ требований, взаимодействие с аналитиками и разработчиками для уточнения деталей, выявление критериев приемки, определение типов тестов, которые будут использоваться.
Планирование тестирования (Test Planning):
Что происходит: Разрабатывается план тестирования, который включает стратегии, объем тестирования, необходимые ресурсы, время и затраты. Определяются роли и обязанности в команде тестирования.
Задачи: Разработка тест-плана, оценка затрат и времени на тестирование, распределение задач среди членов команды, определение критериев входа и выхода для этапов тестирования.
Проектирование тестов (Test Design):
Что происходит: Создаются тестовые сценарии, тест-кейсы, тестовые данные и тестовые среды. Этот этап фокусируется на подготовке всего необходимого для выполнения тестирования.
Задачи: Разработка и документирование тест-кейсов, создание тестовых данных, подготовка тестовой среды, создание автоматизированных тестов (если применимо).
Настройка тестовой среды (Test Environment Setup):
Что происходит: Подготавливается тестовая среда, в которой будет проводиться тестирование. Это может включать установку программного обеспечения, настройку серверов, баз данных и других необходимых компонентов.
Задачи: Подготовка тестового окружения, настройка необходимых инструментов и приложений, проверка готовности среды для выполнения тестов.
Выполнение тестов (Test Execution):
Что происходит: Запуск подготовленных тест-кейсов в тестовой среде. На этом этапе тестировщики выполняют тесты, фиксируют результаты и выявляют дефекты.
Задачи: Выполнение тест-кейсов, документирование результатов тестирования, регистрация и отслеживание дефектов, взаимодействие с разработчиками для исправления найденных проблем.
Оценка качества и завершение тестирования (Test Closure):
Что происходит: После завершения тестирования проводится анализ результатов, оценка качества тестирования и документирование итогов. Вносятся предложения по улучшению процесса тестирования в будущем.
Задачи: Подведение итогов тестирования, анализ дефектов, создание отчета о тестировании, оценка соответствия критериям выхода, ретроспектива по процессу тестирования, архивирование артефактов.
