1) Что такое Ошибка/Дефект/Отказ

Ошибка — это неправильное действие или решение человека, которое приводит к созданию дефекта. Это может быть ошибка на этапе проектирования, программирования или использования системы. Например, программист может неправильно написать код, допустив логическую ошибку или опечатку.
Ошибка (ISTQB) — любое действие человека, которое вызвало неверный результат. Ошибки могут быть допущены разработчиками, тестировщиками или пользователями.

Дефект (или баг) — это отклонение от требований или спецификации, которое появилось из-за ошибки на одном из этапов жизненного цикла разработки продукта.

Отказ — это неспособность системы или продукта выполнить свои функции согласно заданным требованиям или спецификациям.

2) Основные типы багов

1. Функциональные баги
Эти баги связаны с некорректной работой программных функций. Программа не выполняет те задачи, которые предусмотрены требованиями или спецификацией.

2. Логические баги
Возникают, когда программа работает в соответствии с кодом, но логика выполнения неверна. Часто такие ошибки вызваны неправильными условиями или алгоритмами.
Примеры:
-Цикл выполняется большее или меньшее количество раз, чем нужно.
-Неправильная проверка условий (например, использование оператора > вместо >=).

3. Синтаксические баги
Эти баги возникают из-за ошибок в написании кода. Чаще всего такие баги обнаруживаются на этапе компиляции или интерпретации, когда код не может быть выполнен из-за синтаксических ошибок.
Примеры:
-Пропущенная точка с запятой в языке программирования.
-Неверно закрытые скобки.

4. Баги производительности (Performance bugs)
Такие баги возникают, когда программа не работает с ожидаемой производительностью: медленная загрузка, высокая нагрузка на процессор, низкая скорость выполнения операций.

5. Баги безопасности
Это баги, которые могут сделать систему уязвимой к атакам или позволить несанкционированный доступ к данным или функциям.

6. UI/UX баги (Интерфейсные баги)
Связаны с пользовательским интерфейсом и взаимодействием с пользователем. Эти баги могут сделать программу трудной для использования или вызвать путаницу у пользователя.

7. Совместимость (Compatibility bugs)
Эти баги возникают, когда программа не работает корректно на разных устройствах, платформах, браузерах или операционных системах.

8. Конфигурационные баги
Баги, связанные с неправильной настройкой или конфигурацией системы или приложения.
Примеры:
-Программа не запускается из-за отсутствующих или неверно настроенных файлов конфигурации.
-Ошибка подключения к базе данных из-за неправильных данных конфигурации.

9. Регрессионные баги
Это баги, которые возникают после внесения изменений в код (обновлений, исправлений). Такие ошибки появляются в функциональности, которая ранее работала корректно.

10. Критические баги (Critical bugs)
Эти баги делают систему полностью или частично непригодной для использования. Они вызывают сбои или полную остановку работы приложения.

11. Аппаратные баги
Эти баги связаны с некорректной работой программы из-за взаимодействия с аппаратным обеспечением.
Примеры:
-Неверная работа с драйверами устройств.
-Приложение не распознает периферийные устройства.

12. Интернационализация и локализация (I18N/L10N) баги
Баги, возникающие из-за проблем с поддержкой различных языков, форматов дат, валют и других локализованных данных.

3) “Хитрые” баги

Хитрые баги — это скрытые дефекты, которые трудно обнаружить из-за специфических условий их возникновения. Они могут проявляться нерегулярно, в зависимости от конфигурации системы, загрузки или временных факторов.

Гейзенбаг (плавающий) — это баг, который исчезает или меняет свое поведение, как только его пытаются изучить или отладить.
Пример:
Пользователь сталкивается с ошибкой в балансе счета, но при попытке воспроизвести баг — баланс всегда отображается корректно.

Борбаг — это баг, который проявляется постоянно, но только при определенных условиях или входных данных.
Пример:
Функция в приложении выдает ошибку только при очень медленном сетевом подключении.

Мандельбаг — это баг с чрезвычайно сложным и непредсказуемым поведением, часто вызванный глубокими архитектурными дефектами системы.
Пример:
В видеоиграх персонажи застревают в объектах или машины внезапно взлетают на ровной дороге. Эти баги остаются неисправленными даже спустя годы после релиза.

Шрединбаг — это баг, который проявляется только при определённых условиях и может исчезнуть при попытке изучения кода. Как и в парадоксе Шрёдингера, баг как бы «существует и не существует одновременно», пока его не начнут тестировать.
Пример:
Функция программы выдает некорректные результаты только в присутствии конкретного пользователя с определенной конфигурацией прав доступа.

Лунный баг — это баг, который проявляется только в определённое время, зависимо от даты или времени суток. Он может возникнуть из-за скрытых временных параметров в коде, что делает его сложным для обнаружения и воспроизведения.
Пример:
В приложении магазина код скидки работает нормально весь месяц, но в последний день месяца почему-то перестает функционировать.

Статистический баг — это баг, который не проявляется при одном прогоне, но возникает при многократном выполнении кода, генерирующего случайные или псевдослучайные результаты.
Пример:
Программа для бизнес-моделирования выдает незначительные отклонения в результатах, которые со временем накапливаются, искажают данные и приводят к некорректным выводам при анализе больших объемов данных.

Гинденбаг — это баг, который может привести к катастрофическим последствиям для системы, особенно в критически важных инфраструктурах или колоссальным  финансовым убыткам.
Пример:
Ошибка в программном обеспечении управления полетом, которая приводит к краху спутника, или баг в банковской системе, который приводит к миллиардным потерям.

Баг Хиггса — это баг, существование которого предсказано или предполагается, но на практике его невозможно обнаружить. Он может существовать только «теоретически», из-за ошибки в логике кода, но никогда не проявляется при реальном использовании.
Пример:
Ошибка в логике программы, которая, по всем расчетам, должна вызывать сбой, но ни тестировщики, ни разработчики не могут её воспроизвести — система работает идеально.


4) Пример Blocker bug

Blocker bug — это критический баг, который полностью блокирует работу системы или основную функциональность приложения, делая его непригодным для использования.
Веб-приложение интернет-банка имеет баг: при входе в систему после ввода правильного логина и пароля пользователи видят белый экран вместо основной страницы. Никто не может войти в свои аккаунты и управлять своими банковскими счетами.

5) Пример Critical bug

Critical bug — это серьезный баг, который существенно нарушает функциональность системы, но не делает её полностью недоступной.
В интернет-магазине баг на странице оформления заказа: когда покупатель пытается оплатить заказ, система всегда выдает ошибку и не позволяет завершить оплату, но все остальные функции (просмотр каталога товаров, добавление в корзину) работают корректно.

6) Пример Major bug

Major bug — это серьезный баг, который существенно влияет на работу системы или отдельные функции, но не делает систему полностью непригодной для использования.
В мобильном приложении для доставки еды баг на странице выбора адреса доставки: при попытке изменить адрес приложение не сохраняет изменения, и заказ всегда отправляется на предыдущий адрес, который был указан раньше. Однако пользователи по-прежнему могут заказывать еду, если адрес не нужно менять.

7) Пример Minor bug

Minor bug — это баг, который незначительно влияет на работу системы и функциональность. Он вызывает небольшие неудобства для пользователя, но не препятствует использованию ключевых функций приложения.
В веб-приложении интернет-магазина баг с отображением текста: на странице с описанием товара один из абзацев слегка сдвинут влево и выглядит не так, как должен.

8) Пример Trivial bug

Trivial bug — это баг, который имеет минимальное влияние на систему и не затрагивает функциональность или пользовательский опыт. Обычно это чисто косметические или орфографические ошибки, не влияющие на работу приложения.
В мобильном приложении на экране приветствия слово "Добро пожаловать" написано с одной пропущенной буквой: "Добро пожаловат".

9) Жизненный цикл Bug report

Новый
Открыт
Назначен
В работе
Исправлен
Ожидает тестирования
Закрыт
Переоткрыт
Отклонен
Отложен


10) Основные цели локализации дефекта

Локализация дефекта (или отладка дефекта) — это процесс выявления причины ошибки или дефекта в системе. 
1. Определение источника проблемы
Локализация дефекта направлена на точное нахождение причины ошибки в коде, конфигурации или окружении. Это позволяет разработчикам сосредоточиться на исправлении именно той части системы, где возникает проблема.
2. Уменьшение времени на исправление
Точное определение места возникновения дефекта помогает сократить время, необходимое для его исправления. 
3. Предотвращение повторного возникновения
Выявление коренной причины дефекта позволяет предотвратить его повторное появление в будущем. Это может включать в себя внесение изменений в код, улучшение процессов тестирования или обновление документации.
4. Улучшение качества кода
Процесс локализации дефекта способствует улучшению качества кода и архитектуры системы. При выявлении проблемных мест разработчики могут сделать код более устойчивым и менее подверженным ошибкам в будущем.
5. Оптимизация процессов разработки
Понимание того, как дефекты возникают, помогает командам разработки выявить слабые места в процессе разработки и тестирования. Это может привести к улучшению процессов и внедрению лучших практик для предотвращения подобных дефектов.
6. Обеспечение надежности и стабильности системы
Локализация и исправление дефектов способствуют повышению надежности и стабильности системы, что улучшает пользовательский опыт и уменьшает вероятность сбоев и аварий.

11) Методы локализации дефекта в клиентской части

1. Использование инструментов разработчика (Developer Tools)
Примеры: Инструменты разработчика в браузерах (например, Chrome DevTools, Firefox Developer Tools), инструменты для отладки мобильных приложений (например, Android Studio, Xcode).
Метод: Позволяют отслеживать ошибки JavaScript, проверять сетевые запросы, анализировать стили и структуру HTML/CSS, просматривать логи и отладочную информацию.

2. Консольные логи (Console Logging)
Примеры: console.log(), console.error(), console.warn() в JavaScript.
Метод: Вставка логов в код для отслеживания значений переменных, выполнения функций и других важных данных, которые могут помочь выявить проблемы.

3. Отладка кода (Debugging)
Примеры: Использование точек останова (breakpoints) и пошагового выполнения кода в IDE или инструментах разработчика.
Метод: Позволяет остановить выполнение кода на определенных строках и проанализировать состояние переменных и выполнение логики на каждом этапе.

4. Тестирование на различных устройствах и браузерах (Cross-Testing)
Примеры: Использование инструментов тестирования в облаке (например, BrowserStack, Sauce Labs) для проверки поведения приложения на разных платформах и устройствах.
Метод: Помогает выявить дефекты, которые могут проявляться только в определенных окружениях или при определенных условиях.

5. Анализ сетевых запросов (Network Analysis)
Примеры: Сетевые вкладки в инструментах разработчика.
Метод: Проверка запросов и ответов от сервера для выявления проблем с API, неправильных данных или проблем с загрузкой ресурсов.

6. Инструменты профилирования (Profiling Tools)
Примеры: Инструменты для анализа производительности, такие как Chrome DevTools Performance Tab, WebPageTest.
Метод: Помогают выявить проблемы с производительностью, такие как долгие операции, утечки памяти или проблемы с рендерингом.

7. Использование систем логирования и мониторинга (Logging and Monitoring Systems)
Примеры: Системы для сбора и анализа логов, такие как Loggly, Sentry, New Relic.
Метод: Сбор информации о возникших ошибках и исключениях в реальном времени, анализ поведения приложения.

8. Анализ пользовательских отчетов и фидбэка (User Feedback)
Примеры: Сбор данных о проблемах от пользователей через формы обратной связи, тикеты, e-mail.
Метод: Использование отчетов пользователей для выявления дефектов, которые могут не быть замечены в процессе тестирования.

9. Автоматизированное тестирование (Automated Testing)
Примеры: Использование тестовых фреймворков, таких как Selenium, Jest, Cypress.
Метод: Автоматическое выполнение тестов для проверки функциональности приложения и выявления ошибок.

10. Ручное тестирование (Manual Testing)
Примеры: Проведение ручных тестов по заранее подготовленным тест-кейсам.
Метод: Тщательное тестирование функций и сценариев, чтобы определить, где может возникать проблема.


12) Методы локализации дефекта в серверной части

1. Анализ серверных логов (Server Logs)
Примеры: Логи ошибок, логи приложений, логи запросов и ответов.
Метод: Просмотр логов может предоставить информацию о возникших ошибках, исключениях, неудачных запросах и других проблемах. Логи часто содержат стек трейс, который помогает определить, где именно в коде произошла ошибка.

2. Использование инструментов мониторинга (Monitoring Tools)
Примеры: New Relic, Datadog, Prometheus.
Метод: Инструменты мониторинга собирают метрики о работе сервера, такие как время отклика, использование ресурсов, количество запросов. Они помогают обнаружить аномалии и потенциальные проблемы в производительности.

3. Отладка кода (Debugging)
Примеры: Отладочные инструменты и средства IDE, такие как Visual Studio, IntelliJ IDEA, Eclipse.
Метод: Использование отладчиков для установки точек останова (breakpoints) и пошагового выполнения кода позволяет отслеживать выполнение и выявлять, где возникает проблема.

4. Профилирование производительности (Performance Profiling)
Примеры: Инструменты профилирования, такие как JProfiler, YourKit, Xdebug.
Метод: Профилирование помогает анализировать использование CPU и памяти, выявлять узкие места и проблемы с производительностью в серверном коде.

5. Анализ сетевых запросов и ответов (Network Analysis)
Примеры: Инструменты для анализа сетевого трафика, такие как Wireshark, tcpdump.
Метод: Просмотр сетевого трафика помогает понять, как сервер обрабатывает входящие и исходящие запросы, выявить проблемы с передачей данных и взаимодействием между сервером и клиентом.

6. Тестирование API (API Testing)
Примеры: Инструменты для тестирования API, такие как Postman, SoapUI.
Метод: Проверка работы API и взаимодействия с сервером помогает выявить проблемы в логике обработки запросов и ответов.

7. Анализ базы данных (Database Analysis)
Примеры: Инструменты для анализа базы данных, такие как MySQL Workbench, pgAdmin.
Метод: Проверка запросов к базе данных, индексов, производительности и целостности данных помогает выявить проблемы, связанные с хранением и извлечением данных.

8. Использование систем управления конфигурацией (Configuration Management)
Примеры: Инструменты управления конфигурацией, такие как Ansible, Chef, Puppet.
Метод: Проверка конфигурации сервера и приложений помогает убедиться, что все параметры настроены правильно и нет проблем с конфигурацией.

9. Инструменты для анализа кода (Code Analysis Tools)
Примеры: Статический анализ кода с помощью SonarQube, ESLint, Pylint.
Метод: Использование статического анализа кода для выявления потенциальных проблем, уязвимостей и нарушений кодирования.

10. Ручное тестирование и воспроизведение ошибок (Manual Testing and Reproduction)
Примеры: Выполнение ручных тестов по сценариям, воспроизведение ошибок в тестовой среде.
Метод: Ручное тестирование и попытка воспроизвести ошибки помогает выявить и локализовать проблемы, которые могут быть сложными для автоматического обнаружения.

11. Ретроактивный анализ (Post-Mortem Analysis)
Примеры: Анализ происшествий после инцидентов.
Метод: Проводится анализ произошедших дефектов или сбоев, чтобы понять причины и улучшить процессы и системы.

