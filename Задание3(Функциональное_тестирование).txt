1) Что такое функциональное тестирование (Functional/Behavioral testing)?
Функциональное тестирование (Functional/Behavioral testing) — это тип тестирования программного обеспечения, целью которого является проверка того, что программное обеспечение выполняет все заявленные функции и требования, согласно спецификации. Этот вид тестирования фокусируется на проверке того, что система или приложение работает так, как ожидается, в соответствии с функциональными требованиями, и что все функциональные аспекты системы функционируют корректно.

2) Что такое нефункциональное тестирование (Non-Functional testing)?
Нефункциональное тестирование (Non-Functional Testing) — это тип тестирования программного обеспечения, который направлен на проверку его нефункциональных характеристик, таких как производительность, надежность, масштабируемость, безопасность, удобство использования и другие аспекты, не связанные напрямую с функциональностью системы. Цель этого тестирования — убедиться, что программное обеспечение соответствует требованиям к его работе в реальных условиях эксплуатации.

3)Какие виды тестирования относятся к функциональному тестированию?

-по уровню тестирования:
модульное (тестирование одного компонента/модуля), тн "юнит-тестирование";
интеграционное (взаимодействие компонентов);
системное (тестирование всей системы);
*системно-интеграционное (интеграция систем)
приемочное (end to end) (альфа-тестирование (сотрудники компании) и бета-тестирование (пользователи));

-по позитивности сценария: 
позитивное 
негативное  

-по доступу к коду:
белого ящика
черного ящика
серого ящика

-по степени автоматизированности:
ручное
автоматизированное
полуавтоматизированное

-по запуску кода:
статическое (без запуска кода, например, тестирование требований)
динамическое (с запуском кода)

-по цели тестирования: 
Smoke
Sanity
Регрессионное 
Ретест

-по цели тестирования (по Куликову):
smoke
критического пути (тестирование функциональностей, используемых пользователями в повседневной ситуации)
расширенное (тестирование всех функциональностей)

3) Какие виды тестирования относятся к нефункциональному тестированию?
-нагрузочное (производительность и стабильность работы ПО при разных нагрузках)
-безопасности (проверка ПО на наличие уязвимостей и обеспечение защиты)
-масштабируемости (проверка способности ПО эффективно работать при увеличении транзакций или объема данных)
-доступности (проверка доступности ПО для пользователей с ограниченными возможностями)
-совместимости (проверка, как ПО взаимодействует с другим ПО)
-usability (проверка, что интерфейс интуитивно понятен)
-локализации (проверка корректности ПО в условиях конкретной локали (места, языка, культуры))
НО! Если, например, безопасность - основная бизнес-логика приложения, например, антивирус, то тестированию безопасности будет уже функциональным тестированием. Зависит от контекста (один из принципов тестирования)

5) Что такое Статическое/Динамическое тестирование?

Статическое тестирование 
Описание: Это метод тестирования, при котором исходный код программы или документация проверяются без их выполнения. Другими словами, в этом методе тестирования программа не запускается.
Цель: Обнаружение ошибок, недочетов или отклонений от стандарта на ранних стадиях разработки. Это позволяет исправить их до этапа выполнения, что может снизить затраты на исправление.

Примеры:
-Рецензирование кода (code review): проверка кода командой разработчиков.
-Анализ кода: использование инструментов для автоматического анализа кода на наличие ошибок, уязвимостей, нарушений стандартов.
-Статический анализ: автоматизированный процесс, который использует различные инструменты для анализа кода на наличие ошибок без его выполнения.
-Ревизия документации: проверка технической и проектной документации на полноту и соответствие требованиям.

Динамическое тестирование
Описание: Это метод тестирования, при котором программное обеспечение выполняется, и проверяется его поведение в реальных условиях работы. Этот метод включает в себя проверку функциональности, производительности, безопасности и других аспектов работы программы.
Цель: Проверка работы программы в реальных условиях, выявление багов и ошибок, которые могут проявиться только при выполнении кода

6) Что такое Черный/Серый/Белый ящик тестирования (Black/Grey/White box testing)?

Черный ящик тестирования (Black Box Testing)

Описание: Это метод, при котором тестировщик не знает внутренней структуры или кода приложения. Тестирование основывается на анализе функциональности программы на основе её спецификаций. Тестировщик проверяет, работает ли программа в соответствии с требованиями, но не имеет информации о том, как она реализована.
Цель: Проверка функциональности системы по входным данным и выходным результатам.
Пример: Тестировщик вводит данные в интерфейс программы и проверяет, соответствует ли полученный результат ожидаемому, не интересуясь, как программа обрабатывает эти данные.

Плюсы:
-Не требует знаний кода, что упрощает тестирование для людей, не знакомых с программированием.
-Хорошо подходит для тестирования конечных пользователей, так как фокусируется на внешнем поведении системы.
Минусы:
-Может не охватывать все возможные сценарии работы программы.
-Не позволяет глубоко исследовать внутренние баги, возникающие из-за ошибок в коде.


Белый ящик тестирования (White Box Testing)
Описание: Этот метод требует знания внутренней структуры системы. Тестировщик имеет доступ к исходному коду и использует эти знания (т.е. понимает) для разработки тестов, ориентированных на проверку внутренней логики, структуры данных и алгоритмов программы.
Цель: Проверка работы программы с точки зрения кода, включая покрытие кода, правильность работы алгоритмов и структуру данных.
Пример: Тестировщик может проверять, выполняются ли все ветки условий (например, if/else), вызываются ли все методы и используются ли все переменные правильно.

Плюсы:
-Позволяет детально протестировать логику и структуру программы.
-Может выявить скрытые баги, которые не видны при функциональном тестировании.
-Высокая степень покрытия кода.
Минусы:
-Требует глубоких технических знаний и доступ к исходному коду.
-Сложно поддерживать и расширять тесты при изменении кода программы.


Серый ящик тестирования (Grey Box Testing)
Описание: Этот метод представляет собой комбинацию черного и белого ящика. Тестировщик частично знает внутреннюю структуру системы, но не настолько глубоко, как в случае белого ящика. В таком тестировании используются знания о внутренней архитектуре системы в сочетании с тестами на функциональность.
Цель: Оценка поведения системы с учётом некоторых аспектов её внутреннего устройства.
Пример: Тестировщик может знать, как устроена база данных или как взаимодействуют между собой модули программы, и использовать эти знания для написания тестов, проверяющих не только внешний результат, но и корректность работы отдельных компонентов.

Плюсы:
-Баланс между глубокой проверкой логики и доступом к внутренней структуре.
-Можно выявить как функциональные, так и структурные ошибки.
Минусы:
-Требует больше времени и ресурсов, чем тестирование по методу черного ящика.
-Зависимость от точности знаний о внутренней архитектуре.

7) Что такое Компонентное (Component or Unit testing) / Интеграционное (Integration testing) / Системное (System testing) / Приемочное (Acceptance testing) тестирование

Компонентное тестирование направлено на проверку отдельных компонентов программы (обычно функций или методов) в изоляции от других частей системы.

Интеграционное тестирование проверяет взаимодействие между различными модулями или компонентами, когда они объединяются.
Подходы:
-Нисходящее интеграционное тестирование: сначала тестируются высокоуровневые модули, затем низкоуровневые.
-Восходящее интеграционное тестирование: сначала тестируются низкоуровневые модули, а затем высокоуровневые.
-Большой взрыв: все модули объединяются и тестируются сразу.
-Сэндвич: нисходящее + восходящее

Системное тестирование — это проверка всей системы в целом в условиях, максимально приближенных к реальной эксплуатации. Оно включает в себя тестирование как функциональных, так и нефункциональных аспектов (например, производительность, безопасность).

Приемочное тестирование — это проверка, которая проводится для того, чтобы убедиться, что система отвечает бизнес-требованиям и может быть принята пользователем или заказчиком.
Состоит из: альфа и бета тестирования

8)Что такое Позитивное/Негативное тестирование

Позитивное тестирование (Positive Testing)
Цель: Проверить, что система работает корректно в соответствии с требованиями, когда вводятся ожидаемые и допустимые данные.
Задачи:
-Убедиться, что приложение работает правильно при нормальных, корректных входных данных.
-Ожидаемое поведение — успешное выполнение задачи.

Негативное тестирование (Negative Testing)
Цель: Проверить, как система ведет себя при введении неожиданных, некорректных или несанкционированных данных.
Задачи:
-Проверить, как приложение обрабатывает ошибки, исключения или некорректные данные.
-Ожидаемое поведение — система должна корректно обработать ошибку (например, выдать сообщение об ошибке, не допустить сбоя или некорректного результата).

9) Что такое Gorilla testing / Monkey testing

1.Gorilla Testing
Определение: Gorilla Testing (тестирование "Горилла") — это метод, при котором тестировщики или разработчики выбирают небольшую часть системы и подвергают её интенсивному, многократному тестированию. Цель — проверить устойчивость и надежность данной функциональности под нагрузкой.
Основные характеристики:
-Систематическое и глубокое тестирование одной или нескольких функций.
-Повторяющееся выполнение одних и тех же тестов на конкретной части системы.
-Направлено на выявление ошибок, которые могут возникнуть при сильной нагрузке или при многократном использовании одной и той же функции.
Пример: Предположим, что вы тестируете приложение для электронной коммерции. При Gorilla Testing вы можете сосредоточиться на функции "добавить в корзину" и многократно повторять тесты, связанные с этой операцией, чтобы выявить любые возможные дефекты или отклонения в её работе.

2. Monkey Testing
Определение: Monkey Testing (тестирование "Обезьяна") — это техника случайного тестирования, при которой тестировщики или даже скрипты вводят произвольные, некорректные или неожиданные данные в систему без конкретного плана тестирования. Идея заключается в том, чтобы увидеть, как система справится с неожиданными действиями.
Основные характеристики:
-Непредсказуемость: тестировщики вводят случайные данные или действия, чтобы проверить, как система будет реагировать.
-Не структурировано и не требует знания внутренней логики системы.
-Главная цель — попытаться "сломать" систему, выявить неожиданные баги или ошибки, которые могут не быть замечены при обычном тестировании.
Пример: Предположим, у вас есть веб-приложение. В рамках Monkey Testing тестировщик может хаотично нажимать на любые кнопки, вводить случайные данные в поля ввода (например, длинные строки символов или специальные символы), закрывать браузер во время транзакций и т.д., пытаясь выявить нестабильные моменты в системе.

Вывод:
Gorilla Testing направлено на тщательную проверку определенных функций системы.
Monkey Testing используется для хаотичного, случайного взаимодействия с системой, чтобы выявить её слабые места в неожиданных ситуациях.

10) Что такое Альфа (Alpha testing) / Бета (Beta testing) тестирование

Альфа-тестирование — это первый этап тестирования программного обеспечения, который проводится внутри компании-разработчика. Цель этого тестирования — выявить основные баги и дефекты до передачи продукта внешним пользователям.

Бета-тестирование — это второй этап тестирования, который проводится после альфа-тестирования, но уже внешними пользователями, которые не являются сотрудниками компании. Этот этап позволяет собрать отзывы о продукте от реальных пользователей перед официальным запуском.

Альфа-тестирование:
Цель: Обнаружение внутренних ошибок на раннем этапе (оценить общее качество)
Кто тестирует: Внутренняя команда (разработчики, QA)
Среда тестирования: Контролируемая, внутренняя среда
Стадия разработки: На ранней стадии, до завершения разработки
Тип обратной связи: Отчеты об ошибках и дефектах от специалистов
Тип тестирования:Черный+белый ящик

Бета-тестирование
Цель: Оценка продукта в реальных условиях (получить оценку пользователей)
Кто тестирует: Реальные пользователи, клиенты
Среда тестирования: Реальная или почти реальная пользовательская среда
Стадия разработки: Почти завершённая версия, близкая к финальной
Тип обратной связи: Отзывы от пользователей, баги, связанные с реальными сценариями использования
Тип тестирования: Черный ящик

11) Что такое Интуитивное/Исследовательское тестирование

Интуитивное тестирование — это метод тестирования, при котором тестировщик опирается на свою интуицию, профессиональный опыт и здравый смысл для выявления возможных проблем в работе системы. Этот подход не требует строгого следования документам или заранее подготовленным сценариям.

Основные характеристики:
-Основано на интуиции и опыте тестировщика.
-Тестировщик использует свои знания и понимание, чтобы предположить, где могут возникнуть проблемы или баги.
-Применяется чаще всего опытными тестировщиками, которые хорошо понимают принципы работы программного обеспечения и могут "предчувствовать" проблемные области.
-Интуитивное тестирование может выявить неожиданные баги, которые не были учтены в формальных сценариях тестирования.

Пример: Тестировщик, работая с приложением, может догадаться, что необычно длинные строки текста в форме ввода могут вызвать проблемы, хотя это не было указано в требованиях или сценариях тестирования.

Исследовательское тестирование — это метод тестирования, при котором тестировщик изучает приложение в процессе его тестирования. Оно проводится без заранее подготовленных тест-кейсов и основано на одновременном исследовании и тестировании. Важной особенностью является адаптивность: тестировщик строит свои шаги по мере получения информации о работе системы.

Основные характеристики:
-Основано на исследовательском подходе — тестировщик изучает продукт по ходу тестирования.
-В отличие от интуитивного тестирования, исследовательское тестирование может включать элемент планирования и документации, когда тестировщик фиксирует свои действия, идеи и результаты.
-Тестировщик применяет творческий и гибкий подход к поиску ошибок и недочетов, активно адаптируя свои тесты на основе изучения работы системы.
-Подходит для тестирования сложных систем, где не всегда можно заранее предусмотреть все возможные сценарии.

Основные этапы исследовательского тестирования:
1.Изучение: Тестировщик знакомится с приложением, его функциями и интерфейсом.
2.Разработка гипотез: По ходу исследования тестировщик выдвигает предположения о возможных проблемных местах и дефектах.
3.Тестирование: Применяются различные методы тестирования (например, функциональные тесты или проверка производительности), чтобы проверить гипотезы и обнаружить баги.
4.Документация: Записываются результаты и идеи для дальнейшего тестирования.

Пример: Тестировщик открывает новый веб-сайт и начинает исследовать его, взаимодействуя с различными элементами интерфейса, пробуя разные сценарии использования. Например, он может попробовать зарегистрироваться на сайте, используя неожиданные символы в полях или отправить форму без обязательных данных, чтобы увидеть, как система среагирует.


12) Что такое Дымовое (Smoke) / Ре-тест (Retest) / Санити (Sanity) / Регрессионное (Regression) тестирование

Дымовое тестирование — это базовое тестирование, выполняемое для проверки основной функциональности приложения после сборки. Его задача — убедиться, что наиболее важные функции системы работают корректно и что сборка вообще пригодна для дальнейшего тестирования.
Ре-тестирование — это процесс повторного тестирования конкретных тест-кейсов, которые ранее не прошли из-за выявленных дефектов. Оно необходимо для проверки, что баги, исправленные разработчиками, действительно устранены.

Санити тестирование — это тип узконаправленного тестирования, которое проводится для проверки корректности работы новых или изменённых функций после внесения незначительных изменений в код. Оно направлено на подтверждение, что внесенные правки работают правильно, и система в целом продолжает функционировать стабильно.

Регрессионное тестирование — это тип тестирования, проводимый для проверки того, что недавние изменения (например, исправления багов, добавление новых функций) не нарушили уже существующую функциональность системы. Цель — убедиться, что система работает так же, как и до внесения изменений.


13) Что такое тестирование нового функционала / Приемочное тестирование

Тестирование нового функционала — это процесс проверки новых возможностей и функций, добавленных в приложение или систему. Его цель — убедиться, что новые функции работают в соответствии с заданными требованиями и не вызывают ошибок.
Основные характеристики:
-Проверяет новые функции или обновления в системе.
-Оценивает, соответствует ли работа новых функций техническим требованиям и бизнес-логике.
-Включает создание новых тест-кейсов для каждой добавленной функции.
-Охватывает как функциональные (что должна делать система), так и нефункциональные требования (например, производительность, безопасность).
-Может быть выполнено вручную или с помощью автоматизированных тестов.

Приемочное тестирование — это тип тестирования, направленный на проверку того, что система соответствует ожиданиям клиента или конечного пользователя. Оно проводится на финальной стадии разработки перед тем, как продукт будет передан пользователю или выпущен в эксплуатацию.
Основные характеристики:
-Цель — проверить, что программное обеспечение готово к использованию в реальных условиях и что оно выполняет все задачи, определенные заказчиком.
-Проводится клиентом или представителями конечных пользователей.
-Может включать как функциональные, так и нефункциональные проверки (например, удобство использования).
-Если приемочное тестирование пройдено успешно, продукт считается готовым для выпуска или сдачи заказчику.

14) Что такое Ручное / Автоматизированное /Полуавтоматизированное тестирование

Ручное тестирование — это процесс, при котором тестировщик вручную проверяет функциональность приложения или системы. Тестировщик выполняет тест-кейсы без использования автоматизированных инструментов, следуя шагам, чтобы выявить баги и убедиться в корректной работе системы.
Основные характеристики:
-Подходит для проверки сложных пользовательских интерфейсов, где важен человеческий фактор, а также для разовых тестов.
-Требует больше времени и усилий, чем автоматизация, но позволяет тестировщику использовать гибкость и креативность при тестировании.
-Хорошо подходит для исследовательского и приемочного тестирования, где важны интуиция и понимание контекста.
-Легко адаптируется к изменениям, поскольку тестировщик может быстро менять сценарии.

Автоматизированное тестирование — это процесс, при котором тесты выполняются с использованием автоматизированных инструментов или скриптов. Цель автоматизации — сократить время на выполнение тестов и исключить человеческие ошибки.
-Основные характеристики:
-Тест-кейсы записываются и выполняются с помощью инструментов автоматизации, таких как Selenium, TestComplete, Appium и др.
-Автоматизация хорошо подходит для регрессионного тестирования, где необходимо повторять одни и те же тесты много раз.
-Может проверять большие объемы данных или сложные сценарии, которые трудно тестировать вручную.
-Требует первоначального времени на настройку и написание скриптов, но в долгосрочной перспективе экономит время и ресурсы.

Полуавтоматизированное тестирование — это метод, который сочетает в себе как ручное, так и автоматизированное тестирование. В этом подходе часть тестов выполняется автоматически, а часть требует участия тестировщика.
Основные характеристики:
-Некоторые этапы тестирования автоматизированы, например, генерация данных или запуск скриптов, но для других шагов необходимы ручные действия тестировщика.
-Обычно применяется, когда тестирование нельзя полностью автоматизировать из-за сложности сценариев или необходимости в гибкости.
-Чаще всего автоматизируются рутинные задачи (например, подготовка тестовых данных или генерация отчетов), в то время как творческие и исследовательские аспекты остаются за тестировщиками + UI

15) На основании чего происходит разработка тестовых сценариев?

Разработка тестовых сценариев (test cases) происходит на основании следующих ключевых факторов:
-Требования к системе (спецификации): Основным источником информации для разработки тестовых сценариев являются функциональные и нефункциональные требования к системе. Это могут быть требования, описанные в документации (SRS, спецификации пользователя) или согласованные с заказчиком.
-Технические спецификации: Разработчики и архитекторы могут предоставить более детализированные технические документы, в которых описаны внутренние компоненты системы, интерфейсы и бизнес-логика.
-Юзкейсы (Use Cases): Юзкейсы описывают, как пользователи взаимодействуют с системой для выполнения конкретных задач. На их основе разрабатываются сценарии, которые проверяют, правильно ли система обрабатывает различные действия пользователя.
-Истории пользователей (User Stories): В Agile-проектах часто используют истории пользователей для определения функционала системы. Тестовые сценарии создаются на основе этих историй, чтобы проверить выполнение пользовательских требований.
-Диаграммы процессов (например, BPMN, UML): Эти диаграммы могут помочь понять логику работы системы и определить важные точки для проверки.
-Риски и критичность функций: На основе анализа рисков можно определить, какие функциональные части системы требуют более тщательного тестирования. Это особенно важно для критических к бизнесу функций.
-Прецеденты ошибок (Bug Reports): Ранее выявленные дефекты или известные проблемы в аналогичных системах могут использоваться для создания тестов, предотвращающих повторение этих ошибок.
-Нефункциональные требования: Помимо функциональных тестов, сценарии разрабатываются для проверки производительности, безопасности, удобства использования и других аспектов.
-Регрессионное тестирование: На основании ранее проверенных функций создаются сценарии для регрессионного тестирования, чтобы убедиться, что новые изменения не нарушили существующую функциональность.


16) Что такое Frontend / Backend
Frontend и Backend — это два основных компонента архитектуры веб-приложений, которые отвечают за разные аспекты взаимодействия системы с пользователем и обработку данных.

Frontend (клиентская часть) — это та часть приложения, которая отвечает за взаимодействие с пользователем. Это все, что пользователь видит и с чем взаимодействует в браузере или на мобильном устройстве.
Основные характеристики Frontend:
-UI/UX: Пользовательский интерфейс (User Interface, UI) и пользовательский опыт (User Experience, UX) — это ключевые компоненты Frontend-разработки. Все элементы, которые пользователи видят на экране (кнопки, формы, текст), разработаны с учетом удобства взаимодействия.
-Языки разработки:
HTML (HyperText Markup Language) — отвечает за структуру веб-страницы.
CSS (Cascading Style Sheets) — используется для оформления и стилизации страниц (цвета, шрифты, расположение элементов).
JavaScript — придает динамическое поведение веб-страницам (например, изменение содержимого страницы без ее перезагрузки).
-Фреймворки и библиотеки: Для упрощения разработки Frontend используются фреймворки и библиотеки, такие как React, Angular, Vue.js, которые позволяют более эффективно создавать современные веб-приложения.

Задачи Frontend:
-Отображение данных, полученных с сервера (Backend).
-Обеспечение интерактивного взаимодействия пользователя с системой.
-Обработка пользовательских событий (нажатия кнопок, ввод данных).


Backend (серверная часть) — это часть приложения, которая отвечает за обработку данных, логику работы и взаимодействие с базой данных. Эта часть невидима для пользователя, но она обеспечивает функционирование всех сервисов и функций веб-приложения.
Основные характеристики Backend:
-Обработка данных: Backend отвечает за бизнес-логику приложения, включая обработку запросов от клиента (Frontend), выполнение операций с базой данных и возврат обработанных данных обратно на клиент.
-Языки разработки:
Java, Python, PHP, Node.js, Ruby, C# и другие — это популярные языки программирования для Backend-разработки.
-Фреймворки: Для упрощения и ускорения разработки Backend используются фреймворки, такие как Django (Python), Spring (Java), Express (Node.js), Laravel (PHP).
-Базы данных: Backend также взаимодействует с базами данных, где хранятся данные приложения. Существуют реляционные базы данных (например, MySQL, PostgreSQL) и нереляционные базы данных (например, MongoDB, Cassandra).
-API: Backend предоставляет интерфейсы для взаимодействия с Frontend через API (например, REST или GraphQL), по которым Frontend может получать данные или отправлять их на сервер.
-Безопасность и аутентификация: Backend отвечает за безопасность данных, а также за авторизацию и аутентификацию пользователей.

