1) Требования - это что?

Требования - это спецификации, описывающие функции, характеристики и ограничения системы. Они делятся на несколько категорий:

2) Для чего нужен Анализ требований в разработке ПО?

-Определение потребностей пользователей: Помогает понять, что именно нужно конечным пользователям, что снижает риск недовольства продуктом.
-Формулирование четких спецификаций: Позволяет создать детальные и однозначные требования, которые служат основой для проектирования и разработки.
-Управление рисками: Выявление потенциальных проблем на ранних этапах помогает минимизировать риски и избежать дорогостоящих исправлений на поздних стадиях.
-Согласование между заинтересованными сторонами: Способствует лучшему пониманию и согласованию требований между разработчиками, заказчиками и другими участниками проекта.
-Основы для тестирования: Четко сформулированные требования служат основой для разработки тестовых сценариев и валидации, что помогает убедиться, что продукт соответствует ожиданиям.
-Упрощение изменений: Анализ требований создает структуру, которая упрощает внесение изменений и дополнений в будущем.


3)Виды требований

1.Функциональные требования: описывают, что должно делать ПО. Например, какие функции должны быть реализованы, какие данные обрабатываются и как происходит взаимодействие с пользователем.
2.Нефункциональные требования: определяют качества системы, такие как производительность, безопасность, надежность, удобство использования и масштабируемость.
3.Технические требования: описывают технические условия и ограничения, такие как используемые технологии, платформы и стандарты.
4.Бизнес-требования: описывают цели и задачи, которые должны быть достигнуты для удовлетворения потребностей бизнеса.
5.Пользовательские требования: описывают цели и задачи, которые должны быть достигнуты для удовлетворения потребностей пользователей.

4) Функциональные уровни требований

1.Бизнес-требования: Высший уровень, описывающий общие цели и задачи бизнеса. Эти требования формулируются с точки зрения потребностей и ожиданий бизнеса.
2.Пользовательские требования: Описывают, что пользователи ожидают от системы. Это включает в себя интерфейсы, функции и взаимодействия, которые должны быть доступны конечным пользователям.
3.Системные требования: Более детализированные требования, которые определяют, как система должна выполнять заданные функции. Это включает в себя спецификации по взаимодействию компонентов системы, данные, которые система должна обрабатывать, и другие аспекты функционирования.
4.Подсистемные требования: Описывают требования к отдельным компонентам или модулям системы. Это может быть полезно для крупных проектов, где система состоит из нескольких интегрированных частей.
5.Технические требования: Определяют, какие технологии и инструменты должны использоваться для реализации функциональности, включая языки программирования, платформы и другие технические аспекты.


5) Нефункциональные уровни требований

1.Бизнес-требования: Общие требования, касающиеся производительности и эффективности системы в контексте бизнес-целей. Например, необходимость снижения затрат или повышения доходов.
2.Качество продукта: Описывает характеристики, такие как надежность, доступность, удобство использования, производительность и безопасность. Эти требования определяют, как хорошо система должна функционировать.
3.Производительность: Указывает на требования к скорости, отзывчивости и пропускной способности системы. Например, время отклика пользователя или количество одновременно обрабатываемых запросов.
4.Безопасность: Описывает меры по защите данных и предотвращению несанкционированного доступа. Включает в себя аутентификацию, авторизацию, шифрование и защиту от атак.
5.Удобство использования: Охватывает требования к пользовательскому интерфейсу и взаимодействию с системой, включая интуитивность, доступность и эстетические аспекты.
6.Масштабируемость: Определяет способность системы адаптироваться к увеличению нагрузки, включая возможность добавления ресурсов без значительных изменений в архитектуре.
7.Сопровождаемость: Описывает легкость внесения изменений в систему, включая документацию, модульность кода и поддержку.
8.Совместимость: Указывает на способность системы работать в различных средах и с другими системами, включая совместимость с устаревшими системами.


6) Техники сбора требований

-Интервью (в тч фокус-группы): Общение с заинтересованными сторонами для получения информации о потребностях и ожиданиях.
-Анкетирование: Использование опросов для сбора данных от большого числа пользователей.
-Наблюдение: Изучение текущих процессов и поведения пользователей в их естественной среде.
-Мозговой штурм: Коллективная генерация идей и требований в группе.
-Прототипирование: Создание упрощённых версий продукта для визуализации требований и получения обратной связи.
-Анализ документации: Изучение существующих документов, таких как спецификации, отчёты и инструкции.
-Кейс-стадии: Изучение успешных и неудачных примеров для извлечения уроков и требований.
-Групповые обсуждения: Организация встреч с несколькими заинтересованными сторонами для обсуждения и уточнения требований.


7) Спецификация требований ПО (SRS)

Спецификация требований к программному обеспечению (Software Requirements Specification, SRS) — это документ, который описывает, что система должна делать, её функциональные и нефункциональные требования, а также ограничения на проектирование и разработку. SRS является основой для разработки, тестирования и валидации продукта.

Цели SRS:
-Единое видение проекта: Помогает всем заинтересованным сторонам понимать, что будет разрабатываться.
-Основа для разработки: Программисты получают точные требования для реализации.
-Контроль изменений: Позволяет отслеживать изменения требований и оценивать их влияние.
-Основа для тестирования: Тестировщики создают тест-кейсы на основе требований из SRS.

Основные разделы SRS:
1.Введение:
-Цель документа: Описание цели и назначения SRS.
-Область применения: Определение, что охватывает ПО, его основные функции, целевая аудитория.
-Определения, сокращения и акронимы: Список ключевых терминов.
-Ссылки: Документы или стандарты, которые относятся к проекту (например, ГОСТ, ISO).

2.Общее описание:
-Описание продукта: Краткое изложение того, что будет собой представлять ПО, его основные функции и цели.
-Основные пользователи: Перечень целевой аудитории и типы пользователей, их потребности.
-Ограничения: Технические или организационные ограничения (например, использование конкретных технологий).
-Предположения и зависимости: Условия, которые могут повлиять на проект.

3.Функциональные требования:
-Описание функций: Подробное описание функциональности системы, которая включает:
*Вводы и выводы системы.
*Логические условия и ограничения.
*Описание того, как система будет взаимодействовать с внешними компонентами.
-Диаграммы: Включение UML-диаграмм (например, диаграмм прецедентов, активностей) для визуализации функциональности.

4.Нефункциональные требования:
-Производительность: Ожидаемая скорость отклика системы, время выполнения задач, количество поддерживаемых пользователей.
-Надежность: Уровень доступности системы, допустимые периоды простоя.
-Безопасность: Описание требований по защите данных, авторизации и аутентификации.
-Удобство использования (Usability): Требования по интерфейсу пользователя и взаимодействию.
-Масштабируемость: Возможности системы для роста и увеличения нагрузки.

5.Интерфейсы:
-Пользовательские интерфейсы: Описание требований к графическому или командному интерфейсу.
-Интерфейсы с другими системами: Взаимодействие с внешними приложениями, базами данных, API.

6.Требования к аппаратному и программному обеспечению:
Требования к серверам, клиентским машинам, операционным системам, базам данных и другим компонентам.

7.Требования к тестированию и верификации:
Описание критериев, которые должны быть проверены для подтверждения выполнения всех требований.

8.Дополнительные требования:
-Управление конфигурациями: Как будет происходить контроль версий и изменений в ПО.
-Юридические аспекты: Описание лицензирования, прав собственности, юридических ограничений.


9) Что такое Use Case?

Use Case (вариант использования) — это описание взаимодействия пользователя или другой системы с программным обеспечением для достижения определённой цели. Проще говоря, это сценарий, который описывает, как пользователь будет использовать систему для выполнения конкретной задачи. Use Case помогает разработчикам, тестировщикам и другим участникам проекта понять, как система должна функционировать с точки зрения пользователя.

Основные компоненты Use Case:
1.Акторы (Actors): Лица, системы или внешние сущности, взаимодействующие с системой. Акторы могут быть:
-Основными (Primary Actors): те, кто инициирует взаимодействие для достижения своей цели (например, пользователь).
-Вторичными (Supporting Actors): те, кто помогает в выполнении задачи или предоставляет данные (например, внешняя система или администратор).

2.Сценарий (Main Success Scenario): Последовательность шагов, которая описывает основной путь взаимодействия пользователя с системой. Обычно это основной успех — ситуация, когда всё идёт по плану и система выполняет задачу без проблем.

3.Альтернативные потоки (Alternative Flows): Варианты взаимодействия, которые могут отклоняться от основного сценария, например, при возникновении ошибок или нестандартных ситуаций.

4.Предусловия (Preconditions): Описание того, что должно быть выполнено или установлено перед началом сценария. Это условия, необходимые для успешного выполнения задачи.

5.Результаты (Postconditions): Описание того, что произойдёт после успешного выполнения сценария. Это может быть как достижение цели, так и промежуточные результаты.

6.Триггеры (Triggers): События или действия, которые инициируют запуск сценария.

9) Пример Use Case

Название: "Авторизация пользователя"
-Актор: Пользователь
-Предусловие: Пользователь зарегистрирован в системе.
-Основной сценарий:
*Пользователь открывает страницу входа.
*Вводит свои логин и пароль.
*Нажимает кнопку "Войти".
*Система проверяет введённые данные.
*Если данные верны, пользователь получает доступ к личному кабинету.
-Альтернативный сценарий:
*Если данные неверны, система показывает сообщение об ошибке, и пользователь может повторить попытку.
-Результат: Пользователь успешно авторизован в системе.


10) Характеристики качества требований
11) Примеры характеристик качества требований

1.Полнота (или "завершенность").
Каждое требование должно содержать всю информацию, необходимую для его понимания, не оставлять пробелов или недомолвок. Этот критерий относится и к бизнес- и к техническим требованиям.
Пример: "Пользователь может загрузить данные в формате PDF, CSV и т.д." Неясно, какие ещё форматы поддерживаются помимо указанных. Что подразумевается под «и т.д.»?
Полное требование: "Пользователь может загрузить данные в форматах PDF, CSV и JSON."

2.Непротиворечивость (или "согласованность").
Требования не должны противоречить друг другу. Обнаружение несоответствий может быть крайне затруднительным, если требования к одной и той же функциональности продукта находятся в разных местах.
Пример:
- "Пользователь должен быть автоматически разлогинен после 15 минут бездействия."
- "Пользователь должен оставаться в системе до тех пор, пока не завершит редактирование документа."
Первое требование подразумевает автоматический выход по истечении времени, а другое не допускает выхода во время работы над документом.
Непротиворечивые требования: "Пользователь должен быть выведен из системы через 15 минут бездействия, за исключением времени активного редактирования документа."

3.Корректность
Под корректностью понимается точное соответствие запросам пользователей и бизнеса. Это означает, что требования должны полностью удовлетворять нужды заинтересованных сторон, которые будут использовать эти требования для достижения конкретных целей.
Пример: "Пользователь должен быть в состоянии настроить двухфакторную аутентификацию для повышения безопасности"
Это требование к пользователю, а не к программе. Мы делаем продукт и можем диктовать ему требования, но не можем контролировать состояние его пользователей.
Корректное требование: "Приложение должно поддерживать двухфакторную аутентификацию и предоставлять пользователю возможность включить эту функцию в настройках безопасности."

4.Недвусмысленность (или "однозначность")
Важно, чтобы требования были сформулированы однозначно, без жаргона, аббревиатур и неясных фраз, чтобы не возникало различных трактовок.
Пример 1: "Отменить заказ может модератор и администратор сайта".
Несколько интерпретаций этого требованиях являются верными. Программист может решить, что для отмены заказа нужно решение И модератора И администратора сайта, а тестировщик решит, что для отмены заказа достаточно решения только модератора ИЛИ только администратора.
Однозначное требование: "Заказ может быть отменен модератором и администратор сайта. Для выполнения операции достаточно одного из этих сотрудников."
Пример 2: "Сервис должен быть интегрирован с СК."
Что значит СК? Система Криптографии? Сервер Коммуникаций? Система Качества? Служба Консультирования? Что, если в компании есть все эти сервисы?
Однозначное требование: "Сервис должен быть интегрирован с Системой Контроля (СК), предоставляющей разграничение управления доступом.

5.Выполнимость (или "осуществимость").
Выполнимость требований в проекте определяется их возможностью быть реализованными с учетом технических, бюджетных и временных ограничений.
Пример: "Приложение должно распознавать эмоции, по тексту и автоматически подбирать цветовой фон сообщения, соответствующий настроению пользователя"
Разработка данной функции потребует значительных затрат времени и ресурсов, так как включает обучение модели на большом объёме данных и последующее длительное тестирование. Однако большинство пользователей, скорее всего, сочтут функцию избыточной и ненужной.

6.Проверяемость (или "тестируемость").
Тестируемость требований означает их способность быть проверенными через объективные тест-кейсы, которые ясно показывают правильность реализации.
Пример: "Скидка Премиум-пользователя в размере 10% применяется по возможности к заказам пользователя, имеющего статус Премиум."
Неясно, что означает "по возможности" и как проверить наступление или отсутствие этой возможности.
Проверяемое требование: "Скидка Премиум-пользователя в размере 10% автоматически применяется ко всем заказам Премиум-пользователей."

7.Приоритизированность (или "упорядоченность").
Требования должны быть упорядочены по важности, стабильности и срочности. Важность определяет, насколько успех проекта зависит от выполнения требования; стабильность показывает, насколько вероятность изменений в требовании мала; срочность влияет на распределение усилий команды по времени. Неверно расставленные приоритеты могут привести к неэффективному распределению ресурсов, выполнению ненужной работы и нарушению сроков.
Пример:
1. Пользователь должен иметь возможность переключаться между светлой и темной темой интерфейса.
2. Система платежей должна быть интегрирована с новым партнером. API партнера может меняться по мере разработки.
3. Пользователь должен иметь возможность просмотреть информацию о своих заказах"
Нарушена упорядоченность по важности и срочности, так как последнее требование намного полезнее для пользователя, чем наличие светлой и темной темы. Нарушена упорядоченность по стабильности, так как интеграция с системой, чья API может изменяться, создает высокую степень неопределенности и риск ненадежной работы функции, что может потребовать значительных доработок и тестирований. Реализацию этого требования можно отложить до релиза стабильной версии API партнером.

8.Атомарность (или "единичность")
Каждое требование должно быть самодостаточным и описывать только одну ситуацию. Если требование можно разбить на несколько независимых, оно перестаёт быть атомарным. Проблемы с атомарностью возникают, когда в одном требовании описываются разные элементы интерфейса или разные состояния/эффекты от действий пользователя, что затрудняет его понимание и приводит к путанице.
Пример: "Если пользователь нажимает 'Отмена', он должен вернуться на главную страницу, а изменения должны быть сброшены."
Здесь объединены два разных сценария: возврат на главную страницу и сброс изменений, которые могут быть реализованы независимо друг от друга.
Атомарные требования: 
- при нажатии 'Отмена', все внесенные изменения должны быть сброшены.
- при нажатии 'Отмена', пользователь должен вернуться на главную страницу.

9.Необходимость (или "обязательность")
Каждое требование должно приносить реальную пользу бизнесу, выделять продукт на рынке или обеспечивать соблюдение стандартов и правил. Если какое-то требование устарело, было замещено другим или просто не обязательно для реализации, его необходимо удалить из набора требований.
Пример: "Приложение должно поддерживать браузер Internet Explorer 10." Это требование стало устаревшим и должно быть удалено, так как Internet Explorer 10 больше не используется и не поддерживается разработчиками.

10.Прослеживаемость (или "трассируемость")
Требования должны быть оформлены в структурированном виде и, в идеале, иметь уникальные идентификаторы. В контексте тестирования прослеживаемые (или "трассируемые") требования — это те, которые удобно связать с тестами. Для этого используются матрицы трассировки. 

11.Модифицируемость
Модифицируемость требований подразумевает легкость их изменения. Если требования к продукту разбросаны по разным хранилищам или одно и то же требование встречается в нескольких местах, это значительно усложняет их изменение. Хранение требований в единой базе и использование уникальных идентификаторов помогают избежать избыточности и облегчить управление изменениями.
Пример 1: 
В разделе "Авторизация" в Notion: "Все пользователи системы должны проходить двухфакторную аутентификацию для доступа к личным данным."
В разделе "Безопасность" в Confluence: "Все пользователи системы должны проходить двухфакторную аутентификацию для доступа к личным данным."
Одно и то же требование описано как в разделе безопасности, так и в разделе авторизации, ещё и в двух разных хранилищах. При изменении требования в одном месте (например, добавлении новых условий аутентификации) возникает большой риск появления противоречий с другими частями требований. Чтобы внести изменения, придётся прочесывать все хранилища и перечитывать требования, а затем изменять их в нескольких местах. Это увеличивает трудозатраты и время на внесение изменений.

12.Понятность
Понятность определяется тем, насколько легко требования понимает целевая аудитория. Требования должны быть написаны с использованием терминологии, знакомой всем членам команды, которая их использует в работе. Это позволит избежать недоразумений и неправильной интерпретации. Если требования описаны неясно или с использованием специального жаргона, который не является общепринятым, это усложняет их понимание, выполнение и замедляет онбординг новых сотрудников.
Пример 1:  "Реализовать функцию для повышения скорости отклика с использованием методик принудительного управления."
"Методики принудительного управления" — это термин, который не имеет чёткого определения в контексте IT и не используется для описания подходов к оптимизации времени отклика. Сложно понять, как реализовать такое требование и какие технологии имелись в виду.
Понятное требование: "Реализовать кэширование данных для повышения скорости отклика."


12) Что такое пользовательские истории (User story)
13) Пример пользовательский историй

Пользовательские истории (User Story) — это простые, лаконичные описания функций или требований к системе, изложенные с точки зрения конечного пользователя. Они используются в гибких методологиях разработки, таких как Scrum и Kanban, и помогают команде лучше понять, что именно хочет пользователь, и зачем это нужно.
Пользовательская история обычно следует шаблону:

Шаблон пользовательской истории:
Как (роль пользователя), я хочу (функция), чтобы (цель/результат).
Пример:
Как покупатель интернет-магазина, я хочу иметь возможность просматривать свои прошлые заказы, чтобы легко повторить покупку.

14) Преимущества и недостатки User story

Преимущества пользовательских историй:
-Ориентация на пользователя:
User story фокусируется на конечном пользователе и его потребностях, что позволяет команде разрабатывать продукт, который решает реальные задачи.
-Простота и ясность:
Истории формулируются простым и понятным языком, что облегчает коммуникацию между разработчиками, бизнесом и другими заинтересованными сторонами.
-Гибкость:
User stories легко адаптировать в зависимости от изменений требований, а это важно в условиях Agile, где требования могут часто изменяться.
-Фокус на ценности:
Каждая история описывает конкретную ценность для пользователя, что помогает приоритизировать задачи и сосредоточиться на самых важных аспектах продукта.
-Инкрементная разработка:
Позволяют разбивать крупные задачи на более мелкие, что способствует постепенному улучшению продукта и ускорению цикла обратной связи с пользователем.
-Поддержка командной работы:
User stories служат общим ориентиром для всей команды (разработчиков, дизайнеров, тестировщиков), что улучшает координацию и понимание целей.

Недостатки пользовательских историй:
-Поверхностность описания:
User story обычно краткая и может не включать все детали или нюансы задачи, что может привести к недопониманию или недостаточной детализации на этапе разработки.
-Зависимость от команды:
Истории требуют активного участия команды для уточнения требований. Если команда недостаточно вовлечена в процесс уточнения деталей, возможны ошибки или недоработки.
-Риск неполного учета технических требований:
User story акцентирует внимание на пользовательской стороне задачи и может игнорировать важные технические аспекты (например, вопросы производительности или безопасности).
-Трудности при долгосрочном планировании:
Пользовательские истории обычно ориентированы на краткосрочные цели, что делает сложным использование их для планирования более крупных или долгосрочных проектов.
-Проблемы с приоритизацией:
Если не установлены четкие критерии приоритизации пользовательских историй, есть риск, что менее важные задачи могут получить больше внимания, чем более критичные.

15) Критерии приемки (Acceptance criteria)

Критерии приемки (Acceptance Criteria) — это набор требований или условий, которым должен соответствовать продукт, проект или результат работы, чтобы считаться принятым заказчиком или заинтересованными сторонами. Критерии приемки позволяют обеспечить контроль качества и соответствие поставленным целям, а также служат ориентиром для команды разработки и тестирования.


16) Виды и форматы критериев приемки

Виды критериев приемки:
1.Функциональные критерии:
Это требования, описывающие конкретные функции или поведение системы. Например, "система должна сохранять данные в базу данных после нажатия кнопки 'Сохранить'".

2.Нефункциональные критерии:
Эти критерии описывают, как продукт должен работать с точки зрения производительности, надежности, безопасности и т.д. Например, "время отклика системы должно быть менее 1 секунды при 1000 одновременных пользователях".

3.Критерии качества:
Оценка качества работы или конечного продукта. Например, требования к уровню ошибок или дефектов: "не более 2% дефектов в программном обеспечении".

4.Критерии соответствия стандартам:
Продукт должен соответствовать определённым стандартам или нормативным требованиям (например, ISO, ГОСТ и т.д.). Пример: "продукт должен соответствовать стандарту ISO 9001".

5.Бизнес-критерии:
Оцениваются бизнес-результаты, которые должны быть достигнуты. Например, "увеличение конверсии сайта на 10% после внедрения новой системы".

6.Юридические и регуляторные критерии:
Продукт должен соответствовать законам и нормативным актам, действующим в данной области. Например, "система должна обеспечивать защиту персональных данных в соответствии с законом о защите данных".

7.Технические критерии:
Критерии, связанные с использованием конкретных технологий, платформ или архитектурных решений. Например, "система должна быть реализована на платформе .NET".

8.Эксплуатационные критерии:
Связаны с использованием продукта или системы в реальных условиях эксплуатации. Например, "система должна поддерживать круглосуточный режим работы с минимальным временем простоя не более 1 часа в месяц".

Форматы критериев приемки:
1.Документированные требования:
Официальные документы, в которых прописаны все требования к продукту и его приемке (например, спецификации, технические задания, контракты).

2.Чек-листы:
Наборы конкретных шагов или вопросов, которые проверяются перед приемкой продукта. Например, тестировочные сценарии.

3.User Stories:
В Agile-проектах критерии приемки часто формулируются в формате "Историй пользователя" (User Stories). Например, "Как пользователь, я хочу иметь возможность изменять пароль для доступа к своему аккаунту".

4.Acceptance Test Cases (Тесты на приемку):
Описываются конкретные сценарии тестирования продукта или системы для оценки её соответствия критериям. Каждый сценарий предполагает выполнение последовательности действий и ожидание конкретного результата.

5.Протоколы приемки:
Это формализованные документы, которые подписываются заказчиком и исполнителем после успешного выполнения приемочных тестов. Пример: акт приемки работ, включающий результаты проверки соответствия критериям.

6.Демонстрации или пилотные проекты:
В некоторых случаях приемка может проводиться через демонстрацию работы системы или проведение пилотного проекта, чтобы убедиться, что продукт соответствует всем требованиям в реальных условиях.

7.Метрики и KPI (ключевые показатели эффективности):
В некоторых проектах используются числовые метрики для оценки успешности продукта или проекта. Например, "время простоя сервера должно составлять менее 1% от общего времени работы".

Пример формата критериев приемки:
Обычно критерии формулируются простыми предложениями, указывая на конкретные требования, и могут быть представлены в формате "Given-When-Then", используемом в BDD (Behavior Driven Development):

Given — начальное условие.
When — действие или событие.
Then — ожидаемый результат.

Пример 1: User Story: "Как пользователь, я хочу восстановить свой пароль, чтобы получить доступ к своему аккаунту, если его забуду."
Критерии приемки:
-Пользователь должен видеть ссылку "Забыли пароль?" на странице авторизации.
-При нажатии на ссылку открывается страница восстановления пароля.
-Пользователь должен ввести свой зарегистрированный адрес электронной почты.
-После нажатия на кнопку "Отправить", пользователь получает письмо с инструкциями по восстановлению пароля.
-Если адрес электронной почты не зарегистрирован, пользователю отображается соответствующее сообщение об ошибке.

17) Пример критериев приемки - список правил
- список условий, которым должен соответствовать продукт

Критерии приемки для веб-приложения "Интернет-магазин"

1.Регистрация пользователя:
-Пользователь должен иметь возможность зарегистрироваться, указав уникальный адрес электронной почты.
-Пароль должен содержать не менее 8 символов, включая хотя бы одну заглавную букву, одну строчную букву и одну цифру.
-После успешной регистрации пользователь должен получить подтверждающее письмо на указанный email.

2.Авторизация:
-Пользователь должен иметь возможность войти в систему, указав email и пароль.
-Если пользователь ввел неправильный пароль 3 раза, система должна заблокировать вход на 10 минут.
-В случае успешного входа, пользователя перенаправляет на главную страницу магазина.


18) Пример критериев приемки - поведенческий сценарий

Сценарий: Регистрация нового пользователя

Контекст:
Пользователь, который ранее не регистрировался на платформе, должен иметь возможность создать новую учетную запись через форму регистрации.

Критерии приемки:
1.Дано: Пользователь открывает страницу регистрации.
Когда: Пользователь вводит корректные данные в поля "Имя", "Электронная почта", "Пароль" и "Подтверждение пароля".
Тогда: Появляется сообщение об успешной регистрации, и пользователь перенаправляется на главную страницу.

2.Дано: Пользователь пытается зарегистрироваться с уже существующей электронной почтой.
Когда: Пользователь вводит электронную почту, которая уже используется другим пользователем.
Тогда: Появляется сообщение об ошибке "Электронная почта уже используется", и регистрация не завершается.

3.Дано: Пользователь заполняет форму регистрации.
Когда: Поля "Пароль" и "Подтверждение пароля" не совпадают.
Тогда: Появляется сообщение об ошибке "Пароли не совпадают", и регистрация не завершается.

4.Дано: Пользователь оставляет одно или несколько обязательных полей формы регистрации пустыми.
Когда: Пользователь нажимает кнопку "Зарегистрироваться".
Тогда: Появляется сообщение "Заполните все обязательные поля", и регистрация не завершается.

Дополнительные критерии:
Пароль должен быть не менее 8 символов, содержать хотя бы одну цифру и одну заглавную букву. Если пароль не соответствует этим требованиям, то выводится соответствующее сообщение об ошибке.
После успешной регистрации на указанный email должно отправляться письмо с подтверждением регистрации.


19) Критерии INVEST для User story

Критерии INVEST для User Story:
-Independent — история должна быть автономной и не зависеть от других.
-Negotiable — гибкая и обсуждаемая, можно изменить детали.
-Valuable — приносит ценность пользователю или бизнесу.
-Estimable — можно оценить трудозатраты на реализацию.
-Small — достаточно маленькая, чтобы быть выполненной за короткий срок.
-Testable — результат можно проверить и протестировать.


20) Типы метрик тестирования. Каковы цели ввода метрик? Пример метрик:
1. Метрики качества
Цель: Оценить качество продукта.
Примеры:
-Количество дефектов на тысячу строк кода (KLOC).
-Процент успешных тестов.

2. Метрики покрытия
Цель: Определить, насколько полностью тесты охватывают код.
Примеры:
-Покрытие кода (например, процент строк, покрытых тестами).
-Покрытие требований (процент требований, протестированных юнит-тестами).

3. Метрики производительности
Цель: Оценить скорость и отзывчивость системы.
Примеры:
-Время отклика системы.
-Количество запросов в секунду.

4. Метрики эффективности тестирования
Цель: Оценить, насколько эффективно проводятся тесты.
Примеры:
-Соотношение найденных дефектов к общему числу тестов.
-Среднее время на исправление дефекта.

5. Метрики процесса
Цель: Оценить эффективность процесса тестирования.
Примеры:
-Время, затраченное на тестирование.
-Количество тестовых сценариев, разработанных за спринт.

Цели ввода метрик:
Улучшение качества: Помогает выявлять проблемные области.
Оптимизация процессов: Позволяет улучшить процесс тестирования и разработку.
Принятие решений: Обеспечивает данные для обоснованных решений.
Отчетность: Упрощает коммуникацию с заинтересованными сторонами.

21) Что такое приемка приложения?

Приемка приложения — это процесс, в ходе которого заказчик или конечный пользователь проверяет, соответствует ли разработанное приложение заданным требованиям и ожиданиям. Основная цель приемки — убедиться, что продукт готов к запуску и соответствует критериям качества.

Ключевые аспекты приемки приложения:
1.Тестирование требований: Проверка, что все функциональные и нефункциональные требования были реализованы.
2.Пользовательский опыт: Оценка удобства использования и общей удовлетворенности пользователя.
3.Проверка производительности: Тестирование на предмет скорости работы, устойчивости и обработки нагрузки.
4.Безопасность: Оценка на наличие уязвимостей и обеспечение защиты данных.
5.Документация: Проверка наличия и полноты пользовательской документации и инструкций.


22) Что такое аудит приложения?

Аудит приложения — это систематическая проверка и оценка приложения с целью выявления его соответствия установленным стандартам, требованиям и лучшим практикам. Аудит может охватывать различные аспекты приложения, такие как безопасность, производительность, качество кода и соответствие нормативным требованиям.

Основные аспекты аудита приложения:
1.Безопасность: Анализ уязвимостей, проверка на наличие ошибок в аутентификации, авторизации и защите данных.
2.Качество кода: Оценка структуры кода, читаемости, соответствия стандартам кодирования и практикам разработки.
3.Производительность: Тестирование приложения на эффективность работы, время отклика и использование ресурсов.
4.Соответствие требованиям: Проверка, насколько приложение соответствует техническим и бизнес-требованиям.
5.Документация: Анализ наличия и полноты технической и пользовательской документации.

Цели аудита приложения:
-Улучшение качества: Выявление проблем и областей для улучшения.
-Снижение рисков: Предотвращение потенциальных угроз безопасности или производительности.
-Соответствие стандартам: Убедиться, что приложение соответствует внутренним и внешним стандартам и нормативам.
-Оптимизация: Выявление возможностей для повышения эффективности разработки и работы приложения.


23) Этапы проведения аудита

1. Подготовка к аудиту
-Определение цели и объема: Установите, что именно будет проверяться (безопасность, производительность, качество кода и т.д.).
-Сбор информации: Подготовьте документацию, спецификации и предыдущие отчеты о тестировании или аудитах.

2. Планирование аудита
-Составление плана аудита: Определите методы, инструменты и ресурсы, которые будут использоваться.
-Формирование команды: Назначьте аудиторов с необходимыми навыками и опытом.

3. Проведение аудита
-Сбор данных: Проведите анализ кода, тестирование безопасности, изучите документацию и процессы.
-Проверка соответствия: Сравните результаты с установленными стандартами и требованиями.

4. Анализ результатов
-Выявление проблем: Обнаружьте уязвимости, недостатки в коде или процессы, которые требуют улучшения.
-Оценка рисков: Оцените влияние выявленных проблем на приложение и бизнес.

5. Подготовка отчета
-Документирование результатов: Составьте отчет, в котором описаны обнаруженные проблемы, их серьезность и рекомендации по улучшению.
-Презентация отчета: Представьте результаты заинтересованным сторонам, объясняя выявленные риски и рекомендации.

6. Реализация рекомендаций
-План действий: Разработайте план для исправления выявленных недостатков и уязвимостей.
-Мониторинг: Следите за внедрением рекомендаций и их эффективностью.

7. Заключительный обзор
-Оценка результатов: Проведите повторный анализ для оценки улучшений и изменений после внедрения рекомендаций.
-Постоянное улучшение: Внедрите процессы для регулярного аудита и улучшения приложения в будущем.


24) Чем приемка отличается от аудита?

Приемка приложения:
1.Цель: Определить, соответствует ли приложение требованиям заказчика и ожиданиям конечных пользователей.
2.Фокус: Оценка функциональности, удобства использования и общей удовлетворенности пользователя.
3.Участники: Обычно проводится заказчиком или конечными пользователями.
4.Время проведения: Обычно выполняется в конце разработки, перед запуском продукта.
5.Методы: Включает тестирование по требованиям, пользовательское тестирование и проверку на соответствие.

Аудит приложения:
1.Цель: Провести систематическую оценку приложения на предмет соответствия стандартам, требованиям и лучшим практикам.
2.Фокус: Оценка безопасности, качества кода, производительности и соответствия нормативным требованиям.
3.Участники: Обычно проводится сторонними экспертами или внутренними аудиторами.
4.Время проведения: Может проводиться в любое время, включая стадии разработки, поддержки и эксплуатации.
5.Методы: Включает анализ кода, тестирование на безопасность, проверку документации и соблюдение стандартов.

Вывод:
Приемка ориентирована на проверку соответствия требованиям и удовлетворенность пользователей, тогда как аудит сосредоточен на оценке качества, безопасности и соответствия стандартам.

