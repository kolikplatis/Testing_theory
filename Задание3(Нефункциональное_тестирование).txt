1) Что такое тестирование безопасности?
Тестирование безопасности (security testing) — это процесс проверки и оценки защищенности программного обеспечения или системы от возможных угроз и уязвимостей. Цель тестирования безопасности заключается в том, чтобы выявить и устранить потенциальные риски, которые могут привести к утечке данных, несанкционированному доступу или нарушению работы системы.
Основные задачи тестирования безопасности:
Обнаружение уязвимостей: Найти слабые места в системе, которые могут быть использованы злоумышленниками (например, ошибки в коде, конфигурации, архитектуре).
Обеспечение конфиденциальности данных: Убедиться, что данные пользователей и критические данные компании защищены от несанкционированного доступа.
Проверка аутентификации и авторизации: Оценить, насколько надежно система проверяет и контролирует доступ пользователей к различным частям приложения.
Защита от атак: Оценить, насколько система устойчива к различным типам атак (например, SQL-инъекции, XSS, атаки на отказ в обслуживании (DoS/DDoS)).
Соблюдение стандартов и нормативных требований: Убедиться, что система соответствует стандартам безопасности, таким как ISO/IEC 27001, PCI DSS и другим требованиям к защите данных.

2) Перечислите принципы безопасности ПО

1.Принцип минимальных привилегий: Каждому пользователю или процессу должно быть предоставлено минимально необходимое количество прав для выполнения их задач. Это снижает риск эксплуатации уязвимостей.
2.Принцип разделения обязанностей: Критические действия должны требовать участия нескольких субъектов (пользователей или систем), чтобы избежать злоупотребления полномочиями одним субъектом.
3.Принцип "по умолчанию безопасно": Программное обеспечение должно быть разработано так, чтобы оно было безопасным "из коробки", то есть безопасность должна быть включена по умолчанию. Пользователи не должны вручную включать важные функции безопасности.
4.Принцип защиты по нескольким уровням (Defense in Depth): Защита должна быть многоуровневой, включая различные методы защиты на всех уровнях (сеть, операционная система, приложения, данные). Это повышает устойчивость к атакам.
5.Принцип защиты от неудач (Fail-Safe Defaults): В случае сбоя системы или отказа компонента, ПО должно переходить в безопасное состояние, обеспечивая минимальный ущерб для системы и данных.
6.Принцип разделения (Isolation): Различные части системы должны быть изолированы друг от друга, чтобы скомпрометация одного компонента не вела к нарушению безопасности всей системы.
7.Принцип скрытия (Security by Obscurity): Хотя этот принцип не является единственным средством защиты, сокрытие информации о системе (например, конфигурации, версий ПО) может усложнить проведение атак.
8.Принцип подотчетности: Все действия в системе должны быть логированы, а пользователи и процессы должны быть идентифицируемы и подотчетны за свои действия. Это помогает в аудите и расследовании инцидентов.
9.Принцип простоты (Simplicity): Чем проще система, тем легче ее защищать. Сложные системы труднее защищать из-за большого количества точек отказа или сложных зависимостей.
10.Принцип контроля доступа: Необходимо реализовывать строгие механизмы контроля доступа, чтобы ограничивать доступ к системам и данным на основе ролей и полномочий.
11.Принцип обновления и патч-менеджмента: Системы и ПО должны регулярно обновляться и патчиться для устранения выявленных уязвимостей и предотвращения возможных атак.
12.Принцип отказа от доверия (Zero Trust): Ни один пользователь, устройство или система не должны по умолчанию доверяться, независимо от их местоположения в сети, и каждая попытка доступа должна проверяться.

3) Перечислите виды уязвимостей в безопасности ПО

1. SQL-инъекции
SQL-инъекция происходит, когда злоумышленник может вставить произвольный SQL-код в запрос к базе данных через пользовательский ввод. Это может привести к несанкционированному доступу, изменению данных или даже удалению всей базы данных.
2. XSS (Cross-Site Scripting)
XSS уязвимости позволяют злоумышленнику внедрять вредоносный скрипт на веб-страницу, который затем будет выполнен у другого пользователя. Это может привести к краже данных пользователя, таких как cookie или учетные данные.
3. Уязвимость типа "отказ в обслуживании" (DoS/DDoS)
Уязвимости DoS/DDoS могут быть использованы для перегрузки системы или сервера, что приводит к отказу в обслуживании легитимным пользователям. DDoS атаки направлены на парализацию работы системы через распределённую атаку с разных точек.
4. Буферное переполнение (Buffer Overflow)
Буферное переполнение происходит, когда программа записывает больше данных в буфер, чем он может вместить, что может позволить злоумышленнику выполнять произвольный код или нарушить работу программы.
5. Необработанные данные (Unchecked Input)
Уязвимости, связанные с необработанным вводом, возникают, когда программа не проверяет данные, поступающие от пользователя, что может привести к различным атакам, например, инъекции кода или обхода системы безопасности.
6. Уязвимости в аутентификации и авторизации
Эти уязвимости позволяют злоумышленникам обходить механизмы аутентификации (например, с помощью слабых паролей, перебора) или получать доступ к ресурсам, к которым они не должны иметь доступ (недостаточные уровни проверки доступа).
7. CSRF (Cross-Site Request Forgery, межсайтовая подделка запросов)
CSRФ-атаки заставляют пользователя выполнять нежелательные действия на сайте, на котором он аутентифицирован. Это может быть изменение настроек учетной записи, перевод денег и другие действия от имени пользователя.
8. Использование компонентов с известными уязвимостями
Использование библиотек, фреймворков или модулей с известными уязвимостями может открыть доступ для атак, если эти уязвимости не были устранены в коде.
9. Неправильная конфигурация безопасности
Неправильная настройка безопасности (например, плохо настроенные файлы конфигурации, открытые порты или небезопасные настройки серверов) позволяет злоумышленникам легче получить доступ к системе.
10. Проблемы с криптографией
Неправильное использование или реализация криптографических механизмов (например, слабые алгоритмы шифрования, утечка ключей) может привести к раскрытию конфиденциальной информации.

4) Что такое тестирование на отказ и восстановление (Failover and recovery testing)

Тестирование на отказ и восстановление (Failover and Recovery Testing) — это вид тестирования программного обеспечения или IT-систем, который проверяет, как система реагирует на отказ компонентов, а также насколько успешно и быстро она может восстановиться после таких сбоев. Основная цель этого тестирования — убедиться, что система способна продолжать функционировать, даже если определённые её компоненты выходят из строя, и что после сбоя система может вернуться к нормальной работе без потери данных или функциональности.
Тестирование на отказ (Failover Testing):
Это процесс проверки того, как система переключается на резервные ресурсы или узлы при возникновении сбоев. Failover подразумевает, что в случае отказа основной системы или её компонента (например, сервера или сети), система автоматически переключается на резервную инфраструктуру, не нарушая выполнения текущих операций.
Цель — убедиться, что процесс переключения происходит автоматически и без существенных задержек, а пользователи не испытывают или минимально ощущают влияние от этого сбоя.
Пример: Если основной сервер базы данных выходит из строя, система должна автоматически переключиться на резервный сервер базы данных, чтобы продолжить работу без простоев.
Тестирование восстановления (Recovery Testing):
Это процесс проверки того, как система восстанавливается после возникновения критических сбоев. Речь идёт о проверке способности системы вернуться в нормальное рабочее состояние после устранения проблемы, будь то перезагрузка сервера, восстановление баз данных или возврат после катастрофических отказов.
Цель — удостовериться, что система может корректно восстановить данные, процессы и состояние работы без потери информации и функциональности после устранения сбоя.
Пример: После восстановления работы основного сервера важно, чтобы система вернулась к исходному состоянию без потери данных, корректно синхронизировала их с резервными копиями и продолжила функционировать, как прежде.

Важность Failover and Recovery Testing:
Повышение надёжности системы: Эти тесты позволяют убедиться, что система устойчива к сбоям и способна быстро восстанавливаться.
Минимизация времени простоя: Failover уменьшает время простоя и снижает потери для бизнеса.
Защита данных: Восстановление гарантирует, что данные не будут потеряны в случае сбоев.
Повышение доверия пользователей: Быстрое восстановление после сбоя повышает доверие пользователей к системе.

5) Что такое тестирование эффективности использования ресурсов

Тестирование эффективности использования ресурсов (Resource Utilization Testing) — это вид тестирования программного обеспечения, направленный на оценку того, как эффективно система использует доступные ей вычислительные ресурсы, такие как процессорное время (CPU), память (RAM), дисковое пространство, сетевые ресурсы и др.
Цели тестирования эффективности использования ресурсов:
1.Оценка производительности системы:
-Определить, насколько эффективно программное обеспечение использует доступные ресурсы во время выполнения.
-Определить, не перерасходует ли система ресурсы, что может привести к снижению производительности или проблемам в масштабировании.

2.Обнаружение узких мест:
-Выявить компоненты системы, которые чрезмерно загружают ресурсы (например, «прожорливые» по памяти процессы или функции).
-Определить, какие операции или сценарии нагрузки могут привести к превышению допустимого использования ресурсов.

3.Повышение устойчивости:
-Убедиться, что система может эффективно работать в условиях ограниченных ресурсов и не будет испытывать критических проблем при высокой нагрузке.

4.Оптимизация работы системы:
-Обеспечить оптимальное использование ресурсов для улучшения производительности, увеличения скорости работы, снижения энергопотребления и минимизации износа оборудования.

Виды ресурсов, оцениваемых при тестировании:
Процессор (CPU):
-Оценивается, сколько процессорного времени потребляется системой под разной нагрузкой.
-Анализируется, есть ли «пиковые» моменты, когда нагрузка на CPU достигает критических значений.

Оперативная память (RAM):
-Анализируется объем потребляемой памяти и как система освобождает её после завершения операций.
-Проверяется наличие утечек памяти, когда приложение использует память, но не освобождает её.

Дисковое пространство:
-Оценивается, как эффективно программа использует пространство на диске для хранения данных, временных файлов или кеша.
-Проверяются сценарии, при которых система может заполнить все доступное дисковое пространство.

Сетевые ресурсы:
-Проверяется использование пропускной способности сети, особенно для приложений, которые активно взаимодействуют через сеть.
-Оценивается количество сетевых запросов и объем передаваемых данных.

Энергопотребление:
-Это особенно важно для мобильных и встроенных устройств. Оценивается, насколько эффективно программа использует энергию, чтобы минимизировать разрядку батареи.

6) Что такое тестирование масштабируемости (Scalability testing)

Тестирование масштабируемости (Scalability testing) — это тип нефункционального тестирования, который проверяет способность системы, приложения или сети справляться с увеличением нагрузки. Цель этого тестирования — определить, как хорошо система масштабируется при изменении количества пользователей, объема данных или других ресурсов, и как это влияет на ее производительность.
Основные аспекты тестирования масштабируемости включают:

1.Горизонтальная и вертикальная масштабируемость:
-Горизонтальная масштабируемость — способность системы обрабатывать больше нагрузки за счет добавления новых узлов или серверов.
-Вертикальная масштабируемость — способность системы обрабатывать больше нагрузки за счет увеличения ресурсов существующих серверов, таких как процессор, память или дисковое пространство.

2.Тестирование производительности при увеличении пользователей: Проверяется, как система ведет себя при увеличении числа одновременно работающих пользователей или запросов.

3.Тестирование производительности при увеличении данных: Оценивается, как система справляется с большим объемом данных — например, баз данных или файлов, — и как это сказывается на времени отклика и доступности.

4.Тестирование ресурсов: Измеряется использование ресурсов (процессор, память, дисковое пространство, пропускная способность сети) при различных уровнях нагрузки.

5.Выявление узких мест: Тестирование помогает выявить узкие места в архитектуре системы, которые препятствуют ее эффективному масштабированию.

6.Определение пределов масштабируемости: Это помогает определить максимальное количество пользователей или объем данных, при которых система работает эффективно, а также точку, где производительность начинает ухудшаться.


7) Что такое тестирование производительности (Performance testing/Load testing/ Stress testing/Volume testing)

1. Тестирование производительности (Performance Testing)
Цель: Оценить общее поведение и эффективность системы под обычной нагрузкой.
Что тестируется:
Время отклика (Response Time)
Пропускная способность (Throughput)
Использование ресурсов (CPU, память, дисковое пространство и т.д.)
Примеры:
Измерение времени, необходимого для выполнения определенного запроса.
Определение количества запросов, которые система может обработать в секунду без значительного ухудшения производительности.

2. Тестирование нагрузки (Load Testing)
Цель: Определить, как система работает под ожидаемой или прогнозируемой нагрузкой, чтобы удостовериться, что она может выдерживать такую нагрузку без проблем.
Что тестируется:
Способность системы справляться с нормальной и пиковыми нагрузками.
Уровень производительности при заданном уровне нагрузки.
Примеры:
Проверка, как система ведет себя при одновременном подключении 1000 пользователей.
Оценка времени отклика и пропускной способности при увеличении числа запросов.

3. Тестирование стресса (Stress Testing)
Цель: Определить пределы системы, выявить ее слабые места и поведение при экстремальных или превышающих норму нагрузках.
Что тестируется:
Как система реагирует на нагрузку, которая превышает её обычные пределы.
Способность системы восстановиться после отказа или сбоя.
Примеры:
Увеличение нагрузки до тех пор, пока система не начнет сбоить или не станет недоступной.
Изучение поведения системы при резком увеличении числа запросов или объемов данных.

4. Тестирование объема (Volume Testing)
Цель: Оценить, как система справляется с большими объемами данных.
Что тестируется:
Способность системы обрабатывать и управлять большими объемами данных.
Влияние больших объемов данных на производительность системы.
Примеры:
Проверка времени отклика и производительности системы при увеличении объема данных в базе данных.
Оценка системы при загрузке большого количества данных в память или хранилище.


8) Что такое тестирование надежности (Reliability testing)

Тестирование надежности (Reliability Testing) — это тип тестирования, направленный на оценку способности системы работать без сбоев и ошибок в течение определенного периода времени при заданных условиях эксплуатации. Основная цель этого тестирования — убедиться, что система или приложение стабильно функционирует, выполняет свои задачи и сохраняет свою работоспособность в различных ситуациях.

Основные цели тестирования надежности:
1.Определение устойчивости системы: Проверка, как система справляется с ошибками и сбоями. Оценивается, насколько она продолжает работать или восстанавливается после проблем.
2.Оценка долговечности и стабильности: Измерение времени работы системы без сбоев или ошибок в течение длительного времени.
3.Выявление потенциальных проблем: Определение слабых мест и проблемных областей, которые могут привести к сбоям или снижению производительности в будущем.
4.Проверка обработки ошибок и сбоев: Оценка механизмов обработки ошибок и восстановления после сбоев, чтобы убедиться, что система может корректно реагировать на неожиданности.

Основные методы тестирования надежности:
1.Тестирование на стабильность (Stability Testing):
Оценка, как система функционирует в течение продолжительного времени при нормальных условиях эксплуатации.
2.Тестирование на устойчивость (Resilience Testing):
Проверка способности системы выдерживать сбои и ошибки, и корректно восстанавливаться после них.
3.Тестирование на долговечность (Durability Testing):
Оценка системы при длительном использовании, чтобы убедиться, что она сохраняет свою работоспособность и производительность.
4.Тестирование отказоустойчивости (Fault Tolerance Testing):
Проверка, как система обрабатывает преднамеренные или случайные сбои, чтобы убедиться, что она может продолжать работу или восстановиться после них.

Примеры тестов на надежность:
-Долговременные тесты: Запуск системы в течение длительного времени (дни, недели) для оценки ее стабильности и обнаружения проблем, которые могут возникнуть при продолжительной эксплуатации.
-Тесты на нагрузки: Проверка работы системы при увеличении нагрузки или при неблагоприятных условиях, чтобы определить, как она справляется с неожиданными ситуациями.
-Тесты на сбои: Искусственное создание сбоев (например, отключение сети, сбои в работе оборудования) для проверки способности системы корректно реагировать и восстанавливаться.

9) Что такое тестирование стабильности (Stability testing)

Тестирование стабильности (Stability Testing) — это вид программного тестирования, направленный на проверку способности системы или программного обеспечения поддерживать стабильную работу в условиях длительных нагрузок, непрерывной эксплуатации или экстремальных условий работы. Основная цель тестирования стабильности — выявить проблемы с производительностью, утечкой памяти, зависаниями и другими сбоями, которые могут возникнуть при продолжительном использовании системы.

Ключевые аспекты тестирования стабильности:
1.Длительное выполнение: Система подвергается длительному стрессу (например, непрерывной работе в течение нескольких часов или дней) для выявления возможных проблем, возникающих со временем.
2.Нагрузка: Тестирование проводится под разными уровнями нагрузки, чтобы оценить, как система справляется с ростом числа пользователей, запросов или данных.
3.Нестабильные состояния: Тестирование помогает обнаружить моменты, когда система начинает терять стабильность, например, из-за утечек памяти или увеличивающейся задержки в ответах.
4.Потребление ресурсов: Изучается, как со временем система потребляет ресурсы (например, процессорное время, память, дисковое пространство), чтобы выявить деградацию производительности.
5.Непрерывность работы: Тестирование ориентировано на проверку того, что система способна работать стабильно в течение продолжительных периодов без сбоев или критических ошибок.

10)Что такое тестирование удобства использования (Usability testing)

Тестирование удобства использования (Usability Testing) — это метод оценки программного обеспечения или системы, который фокусируется на удобстве, эффективности и удовлетворенности пользователей при взаимодействии с продуктом. Цель этого тестирования — выявить проблемы, затрудняющие работу пользователей, и улучшить общий пользовательский опыт (UX).

Основные аспекты тестирования удобства использования:
1.Простота использования: Оценивается, насколько легко пользователям выполнять задачи, понимать интерфейс и пользоваться функциями системы.
2.Эффективность: Измеряется, насколько быстро пользователи могут достичь своих целей с минимальными усилиями и ошибками.
3.Запоминаемость: Исследуется, насколько хорошо пользователи запоминают, как использовать интерфейс или функции после некоторого времени.
4.Удовлетворенность: Определяется уровень удовольствия и удовлетворенности пользователей при работе с продуктом.
5.Ошибки пользователей: Изучаются ошибки, которые пользователи совершают в процессе взаимодействия с системой, и насколько быстро они могут восстановиться после этих ошибок.

Пример:
Предположим, компания разрабатывает новое мобильное приложение для онлайн-покупок. В рамках тестирования удобства использования пользователи будут пробовать зарегистрироваться, добавить товары в корзину и совершить покупку. Во время теста наблюдают, как легко и быстро они справляются с этими задачами, а также отмечают моменты, где возникают затруднения или путаница (например, слишком сложный процесс регистрации).

11) Что такое тестирование Pixel perfect? Какими инструментами можно пользоваться

Pixel Perfect тестирование — это метод тестирования интерфейсов, при котором проверяется точность визуального отображения элементов пользовательского интерфейса (UI) относительно изначального макета (дизайн-макета). Цель тестирования Pixel Perfect — убедиться, что разработанный интерфейс точно соответствует дизайну вплоть до каждого пикселя. Это особенно важно для веб-дизайна, мобильных приложений или любого графического контента, где детали визуальной составляющей играют ключевую роль.
Основные задачи Pixel Perfect тестирования:
1.Сравнение с дизайн-макетом: Проверка интерфейса на предмет точного соответствия заранее утвержденному дизайну (например, макету, созданному в Figma или Adobe XD).
2.Точность размещения элементов: Изучение правильности расположения кнопок, иконок, текстовых полей и других элементов относительно друг друга.
3.Соответствие размеров: Проверка размеров элементов и их пропорций, таких как отступы, поля, шрифты и тени.
4.Цветовые схемы и шрифты: Проверка соответствия использованных цветов и шрифтов утвержденному дизайну.
5.Отображение на разных устройствах: Тестирование отображения интерфейса на различных экранах и разрешениях, чтобы убедиться, что элементы сохраняют свой внешний вид независимо от устройства.

Когда используется Pixel Perfect тестирование:
-Когда нужно соблюсти строгие требования к дизайну (например, для высокобрендированных сайтов).
-Для сложных графических интерфейсов, где визуальное восприятие является ключевым.
-В проектах, где пользовательский интерфейс — основное средство взаимодействия, и важен эстетический аспект.

Инструменты:
PixelPerfect (плагин для браузеров)
PerfectPixel (плагин для браузеров)
Figma
Adobe XD
Sketch
Zeplin
Avocode


12) Что такое тестирование локализации / совместимости / адаптивности

1.Тестирование локализации (Localization Testing)
Цель: Проверить, что программное обеспечение правильно адаптировано к языковым и культурным особенностям конкретного региона или страны.
Что проверяется:
-Правильность перевода интерфейса на другие языки (локализованные строки, сообщения об ошибках, меню и т.д.).
-Форматы даты, времени, чисел, валюты.
-Специфические для региона символы и единицы измерения.
-Поддержка локальных алфавитов (например, иероглифов, кириллицы и т.п.).
-Отображение текста с учётом длины строк (например, некоторые языки могут занимать больше места на экране).

Пример: Если программное обеспечение локализовано для пользователей в России, то оно должно поддерживать кириллицу, показывать даты в формате "дд.мм.гггг" и валюту в рублях.

2.Тестирование совместимости (Compatibility Testing)
Цель: Проверить, что программное обеспечение корректно работает на разных платформах, устройствах и в различных конфигурациях.
-Тестирование обратной совместимости направлено на обеспечение работы новых версий программного обеспечения со старым оборудованием/более старыми версиями программного обеспечения.
-Тестирование прямой совместимости направлено на установление совместимости программного обеспечения с существующими или будущими версиями устройства.
Что проверяется:
-Работа на различных операционных системах (Windows, macOS, Linux).
-Совместимость с разными версиями браузеров (Chrome, Firefox, Safari, Edge и т.д.).
-Производительность и функциональность на различных аппаратных платформах (например, разные модели смартфонов, планшетов, ноутбуков).
-Совместимость с разными сетевыми конфигурациями (разные скорости подключения, типы сетей и т.д.).

Пример: Веб-приложение может корректно работать в Google Chrome, но не отображать часть элементов в Firefox. В этом случае необходимы тесты на совместимость.

3.Тестирование адаптивности (Responsive Testing)
Цель: Проверить, что пользовательский интерфейс программного обеспечения корректно отображается и функционирует на различных экранах и устройствах, особенно при изменении размеров экрана.
Что проверяется:
-Адаптация интерфейса под разные размеры экранов (мобильные телефоны, планшеты, компьютеры).
-Правильное отображение элементов интерфейса при изменении ориентации устройства (портретный/ландшафтный режим).
-Удобство взаимодействия и читаемость интерфейса на устройствах с различной плотностью пикселей.

Пример: Веб-сайт, который хорошо выглядит и работает на настольном компьютере, должен также корректно отображаться на смартфоне, адаптируя элементы интерфейса

13)Что такое тестирование установки (installation testing)

Тестирование установки (или installation testing) — это тип тестирования программного обеспечения, направленный на проверку процесса установки и настройки приложения на целевой системе. Основная цель такого тестирования заключается в том, чтобы убедиться, что программное обеспечение правильно устанавливается, обновляется, конфигурируется и удаляется без ошибок или сбоев.

Основные аспекты тестирования установки:
1.Установка на чистую систему: Проверяется возможность установки ПО на систему, где оно ранее не было установлено. Здесь тестируется весь процесс установки — от запуска инсталлятора до завершения установки.
2.Обновление (upgrade): Проверяется процесс обновления с предыдущей версии программы на более новую. Важно, чтобы при обновлении все настройки, данные и предыдущие компоненты сохранялись корректно.
3.Удаление (uninstallation): Тестируется возможность корректного удаления программного обеспечения с системы. ПО должно удаляться полностью, не оставляя после себя ненужных файлов, записей в реестре или других артефактов.
4.Установка при неполных условиях: Например, установка без прав администратора, с недостаточным дисковым пространством или при отсутствии необходимых зависимостей. Важно убедиться, что система корректно реагирует на такие ситуации, а пользователю предоставляются понятные сообщения об ошибках.
5.Проверка зависимостей: Некоторые приложения требуют наличия определённых зависимостей (например, библиотеки, драйвера или другие программы). Тестирование установки включает проверку того, что такие зависимости либо корректно установлены, либо программа сообщает об их отсутствии.
6.Множественные платформы: Если ПО поддерживает несколько операционных систем или платформ, тестирование установки проводится на каждой поддерживаемой платформе, чтобы убедиться в корректности работы.
7.Сценарии восстановления после сбоев: Важный аспект тестирования — проверка того, как приложение ведет себя в случае сбоя во время установки (например, при неожиданном завершении процесса). В идеале, программа должна уметь откатываться к исходному состоянию или корректно завершать установку при повторной попытке.

14)Что такое ETL-тестирование / тестирование перед миграцией (Pre-Migration testing) / Миграционное тестирование (Migration testing) / Тестирование после миграции (Post-migration testing)

ETL-тестирование, тестирование перед миграцией (Pre-Migration testing), миграционное тестирование (Migration testing) и тестирование после миграции (Post-migration testing) — это этапы и типы тестирования, связанные с переносом данных и систем из одной среды в другую, часто при переходе на новые версии, платформы или инфраструктуры. Эти виды тестирования помогают обеспечить правильность, полноту и корректность миграции данных и систем. Рассмотрим каждый из этих типов подробнее:

1. ETL-тестирование (Extract, Transform, Load Testing)
ETL-тестирование — это процесс проверки правильности выполнения операций извлечения (Extract), трансформации (Transform) и загрузки (Load) данных, которые происходят в рамках ETL-процессов при работе с хранилищами данных.
Этапы ETL-тестирования:
-Extract (Извлечение): Проверка того, что данные корректно извлекаются из исходных систем (например, баз данных, файловых систем и других источников).
-Transform (Трансформация): Убедиться, что данные правильно преобразуются в нужный формат согласно бизнес-правилам. Проверяются все этапы трансформации данных.
-Load (Загрузка): Проверка правильности загрузки данных в целевую систему, будь то хранилище данных (Data Warehouse) или другая база.

Цель:
Убедиться, что данные корректно и полно извлечены, трансформированы и загружены в целевую систему, без потерь и искажений.

2. Тестирование перед миграцией (Pre-Migration testing)
Тестирование перед миграцией — это подготовительный этап, включающий проверку исходных данных, систем и инфраструктуры перед фактическим началом миграции данных или систем. Этот этап помогает избежать возможных проблем и определить любые потенциальные риски до начала процесса миграции.
Основные задачи:
-Аудит исходных данных: Проверка целостности, консистентности и качества данных в исходной системе. Выявление потенциальных проблем, таких как дубликаты, пропущенные данные или ошибки.
-Оценка готовности систем: Убедиться, что инфраструктура и системы (как исходные, так и целевые) готовы к миграции. Это может включать проверку конфигураций серверов, сетевых настроек и совместимости версий.
-Планирование миграции: Подготовка сценариев миграции, тестовых планов и методов отката в случае неудачи.

Цель:
Подтвердить готовность к миграции, чтобы минимизировать риски и проблемы во время фактического процесса миграции.

3. Миграционное тестирование (Migration testing)
Миграционное тестирование — это тестирование, выполняемое во время процесса миграции для проверки того, что данные и приложения корректно перемещаются из одной системы в другую, сохраняя свою целостность и функциональность.
Основные задачи:
-Проверка процесса миграции: Оценка того, что данные или системы успешно и корректно перемещены из исходной среды в целевую.
-Сохранение целостности данных: Проверка того, что данные не потерялись и не были повреждены в процессе миграции.
-Сопоставление старой и новой системы: Сравнение данных и функциональности исходной и целевой систем для выявления расхождений.

Цель:
Обеспечить успешную миграцию данных или систем с сохранением всех необходимых параметров и требований.

4. Тестирование после миграции (Post-migration testing)
Тестирование после миграции — это финальный этап, выполняемый после завершения миграции, чтобы убедиться, что все данные были корректно перенесены, а целевая система работает ожидаемым образом.
Основные задачи:
-Проверка целостности данных: Подтверждение, что все данные правильно перенесены, без потерь, дубликатов или искажений. Выполняется сравнение исходных данных с целевыми.
-Проверка функциональности: Убедиться, что все приложения и системы работают корректно в новой среде и что функциональность не была нарушена.
-Проверка производительности: Оценить, не снизилась ли производительность после миграции, особенно в критически важных приложениях или процессах.
-Проверка совместимости: Проверка того, что новые системы и данные совместимы с другими системами и приложениями.

Цель:
Подтвердить успешную и полную миграцию данных и систем, а также убедиться, что новая система готова к работе в боевом режиме.

Итог
-ETL-тестирование — проверка процессов извлечения, трансформации и загрузки данных в рамках работы с хранилищами данных.
-Тестирование перед миграцией (Pre-Migration testing) — аудит и подготовка перед миграцией данных или систем.
-Миграционное тестирование (Migration testing) — проверка процесса миграции в реальном времени для обеспечения корректности переноса данных.
-Тестирование после миграции (Post-migration testing) — проверка целостности и функциональности данных и систем после завершения миграции.

